Applicationmain
ApplicationTestcontextLoads
ReferenceUtilsgenerateInvoiceNumber
ReferenceUtilsgeneratePaymentReference
ReferenceUtilsgenerateExternalIdKrn
ReferenceUtilsgenerateUserAccountPersonaKrn
ReferenceUtilsgenerateKredAuthorizationKrn
ReferenceUtilsgenerateKredMonthlyContainerKrn
ReferenceUtilsgenerateKredBalanceKrn
ReferenceUtilsgenerateKredFeeKrn
ReferenceUtilsgenerateKredInterestKrn
ReferenceUtilsjoinElements
ReferenceUtilsgenerateKredKrn
ReferenceUtilsgenerateKrn
ReferenceUtilsTestgenerateInvoiceNumber
ReferenceUtilsTestgeneratePaymentReference
ReferenceUtilsTestgenerateKredBalanceKrn
ReferenceUtilsTestgenerateKredAuthorizationKrn
TestContextcreateSimClaimSeed
TestContextcreatePaymentAnnouncement
TestContextcreateSimBatchPayment
TestContextcreateDebtItem
TestContextcreateDebtItemChange
BalanceAllocationsetByType
BalanceSettlementAllocationServicebalanceSettlementAllocation
BalanceSettlementAllocationServiceTestbefore
BalanceSettlementAllocationServiceTestallocationNotExceedOutstandingPrinciple
BalanceSettlementAllocationServiceTestallocationNotExceedOutstandingFee
BalanceSettlementAllocationServiceTestallocationNotExceedOutstandingInterest
BalanceSettlementAllocationServiceTestallocationExceedTotalOutStandingAmount
BalanceSettlementAllocationServiceTestallocationShouldHandleNullInsettlementAmount
BalanceSettlementAllocationServiceTestsetUpSimClaimSeed
ContainerAllocationsetByType
ContainerSettlementAllocationServicecontainerSettlementAllocation
ContainerSettlementAllocationServiceTestbefore
ContainerSettlementAllocationServiceTestallocationNotExceedOutstandingPrinciple
ContainerSettlementAllocationServiceTestallocationNotExceedOutstandingFee
ContainerSettlementAllocationServiceTestallocationNotExceedOutstandingInterest
ContainerSettlementAllocationServiceTestallocationExceedTotalOutStandingAmount
ContainerSettlementAllocationServiceTestallocationShouldHandleNullInsettlementAmount
ContainerSettlementAllocationServiceTestsetUpSimClaimSeed
ResponseCodeProvokerverify
ResponseCodeProvokerverify
ResponseCodeProvokerTestbeforeEach
ResponseCodeProvokerTestdcaGroupOk
ResponseCodeProvokerTestdcaGroupBadRequest
ResponseCodeProvokerTestdependencyOk
ResponseCodeProvokerTestdependencyBadRequest
VersionValidatorverify
BucketServiceMockEndpointgetBucket
CommunicationsHistoryMockEndpointgetCommunicationsContents
CommunicationsHistoryMockEndpointgetCommunications
DcaExternalMockEndpointplaceClaim
DcaExternalMockEndpointstopOutsourcingV2
DcaExternalMockEndpointping
DcaExternalMockEndpointrecall
DcaExternalMockEndpointbatchPaymentDetails
DcaExternalMockEndpointannounceDebtItemChanges
DcaMockAdminEndpointregister
DecisionStoreMockEndpointgetDecisionObjects
KlarnaCardGatewayMockEndpointgetPersonaResult
KlarnaCardGatewayMockEndpointTestgetPersonaResult_externalReferenceId_sanityTest
KlarnaCardGatewayMockEndpointTestgetPersonaResult_externalReferenceKrn_sanityTest
OsisMockEndpointgetOsisResult
PaymentsBundlerMockEndpointcreatePaymentBundle
PaymentsBundlerMockEndpointrandomSST
PersonaMockEndpointgetPersonaResult
PurchaseTokenEndpointgetContainerBalances
SalMockEndpointV1getContainerBalances
SalMockEndpointV1getContainerFees
SalMockEndpointV1getContainerInterests
SalMockEndpointV1getContainer
SalMockEndpointV1getFeesFromBalance
SalMockEndpointV1changeOwnerOfContainerId
SalMockEndpointV1changeOwnerOfBalanceId
SalMockEndpointV1setContainerDunningState
SalMockEndpointV1setBalanceDunningState
SalMockEndpointV1writeOffContainer
SalMockEndpointV1writeOffBalance
SalMockEndpointV2getBalance
SimulatorClaimEndpointgetSimClaimByClaimId
SimulatorClaimEndpointstopOutsourcing
SimulatorClaimEndpointstopOutsourcingReverse
SimulatorClaimEndpointsendPartialPayment
SimulatorClaimEndpointsendMultiplePartialPayments
SimulatorClaimEndpointsendPartialReturn
SimulatorClaimEndpointsendFullReturn
SimulatorClaimEndpointsendDebtItemChanges
SimulatorClaimEndpointproductMarketSeed
SimulatorClaimEndpointbulkSeed
SimulatorClaimEndpointbulkSettlements
SimulatorClaimEndpointbadRequest
SimulatorEndpointclearCaches
SimulatorEndpointstoreSeed
SimulatorEndpointsendDunningStateUpdatedEvents
SimulatorEndpointgetSimClaimSeedByAggregateKrn
SimulatorEndpointgetDcaGroups
SimulatorEndpointpostBundle
SimulatorEndpointrunBatchPaymentsForAllDcaClients
SimulatorEndpointgetBatchPaymentsForDcaClient
SimulatorEndpointstartBatchPaymentForDcaClient
SimulatorEndpointannouncePayment
SimulatorEndpointreverseAnnouncedPayment
SimulatorEndpointstopBatchPayment
SimulatorEndpointsendMatchingBankAccountStatement
SimulatorEndpointsendBookkeepingEventToGenerateAcknowledgement
SimulatorEndpointsendSubledgerAcknowledgementBooked
SimulatorEndpointsendSubledgerAcknowledgementNotBooked
SimulatorEndpointsendNonMatchingBankAccountStatment
SimulatorEndpointputSimDependencyHttpStatus
SimulatorEndpointping
SimulatorEndpointchangeOwnership
SimulatorEndpointgetRegisteredEndpointVersion
SimulatorRefDataEndpointgetSimProducts
SimulatorRefDataEndpointgetSimBankAccounts
SimulatorRefDataEndpointgetSimDca
SimulatorRefDataEndpointputSimDcaGroupHttpStatus
SimulatorRefDataEndpointrefDataLoad
ReferenceNotFoundExceptiongetReference
SimBatchPaymentCacheclear
SimBatchPaymentCachestoreBatchPayment
SimBatchPaymentCachegetBatchPaymentsForDcaClient
SimBatchPaymentCacheensureListForCombinedKey
SimBatchPaymentCachegetSimBatchPayment
SimBatchPaymentCacheTestbeforeEach
SimBatchPaymentCacheTestgetSimBatchPayment
SimClaimCacheclear
SimClaimCachegetClaimsByBatchId
SimClaimCachestoreClaim
SimClaimCachecreateClaimFromSeed
SimClaimCachestorePlacement
SimClaimCachestoreDebtItemChanges
SimClaimCachestoreDebtItemChanges
SimClaimCachegetClaimById
SimClaimCachegetClaimIdFromCache
SimClaimCachegetSimClaimsWithPositivePaymentAnnouncementAmounts
SimClaimCacherecallClaim
SimClaimCacheTestbeforeEach
SimClaimCacheTeststorePlacement
SimClaimCacheTestpositiveSettlementAmount
SimClaimCacheTestgetFromCache
SimDependencyCacheaddSimDependency
SimDependencyCachegetDependencyHttpStatus
SimDependencyCachesetDependencyHttpStatus
SimDependencyCachegetDependencies
SimDependencyCacheTestbeforeEach
SimDependencyCacheTestfindSeedForSalStandAloneBalance
SimRefDataCacheaddSimProduct
SimRefDataCachegetSimProduct
SimRefDataCachegetSimProducts
SimRefDataCacheaddSimDcaGroup
SimRefDataCacheaddSimNonCapitalizables
SimRefDataCacheaddSimBankAccount
SimRefDataCachegetSimBankAccounts
SimRefDataCachegetSingleSimBankAccount
SimRefDataCachegetSimNonCapitalizables
SimRefDataCachegetSimDcaGroup
SimRefDataCachegetSimDcaGroups
SimRefDataCachegetDcaGroupHttpStatus
SimRefDataCachesetDcaGroupHttpStatus
SimRefDataCachegetSimDomicile
SimRefDataCacheTestbeforeEach
SimRefDataCacheTestnoBankAccount
SimRefDataCacheTestoneBankAccount
SimRefDataCacheTestmultipleBankAccounts
SimSeedCacheclear
SimSeedCachestoreSeed
SimSeedCachegetIdFromIdentifier
SimSeedCachegetPersonaId
SimSeedCachegetPersonaId
SimSeedCachegetCustomerIdentifier
SimSeedCachecreateOsisSeed
SimSeedCachenotExistsInSimOsisSeeds
SimSeedCachegetSeedByAnyRef
SimSeedCachegetSeedByAnyRefOrBackFill
SimSeedCachebackfillContainer
SimSeedCachebackfillBalance
SimSeedCachebuildVariables
SimSeedCacheTestbeforeEach
SimSeedCacheTestfindSeedForSalStandAloneBalance
SimSeedCacheTestfindSeedForContainer
SimSeedCacheTestfindSeedForBalanceInContainer
SimSeedCacheTestbackfill
SimSeedCacheTestcreateContainerWithBalanceSeed
SimSeedCacheTestcreateStandaloneBalanceSeed
SimSeedCacheTestcreateSalWithContainer
SimSeedCacheTestcreateSalWithBalance
SimSeedCacheTestcreateSimBalanceSeed
SimSeedCacheTestcreateSimContainerSeed
SimSeedCacheTestcreateKrn
ProductTypefromProduct
ProductTypefromOwner
ProductTypefromProduct
ProductTypegetOwner
ProductTypegetProduct
ProductTypegetIsOrganization
ProductTypeTestfromProductTest
ProductTypeTestfromTermsOwnerTest
ProductTypeTestfromProductInvalidParameter
ProductTypeTestfromTermsOwnerInvalidParameter
ProductTypeTestfromProductNullParameter
ProductTypeTestfromTermsOwnerNullParameter
AssignmentRequestListenerhandle
AssignmentRequestListenergetDcaAssignedEvent
AssignmentRequestListenerdefaultAssignment
AssignmentRequestListenergetFromCache
AssignmentRequestListenergetEvent
AssignmentRequestListenergetSpecificEvent
AssignmentRequestListenerhandle
AssignmentRequestListenerhandleUnknownMessages
AssignmentRequestListenerbuildDcaIdentifier
AssignmentRequestListenerexportEventBuilder
AssignmentRequestListenerbuildMetadata
AssignmentRequestListenerConsumerConfiginternalEventsKafkaListenerContainerFactory
DcengineApiupdateDesiredAssignment
DcengineApideleteAssignment
DcengineDataCacheinit
DcengineDataCacheaddByAggregateKrn
DcengineDataCachegetAssignment
DcengineDataCacheremoveAssignment
DcengineDataCachegetDcaForCountry
DcengineDataCacheupdateDcaForCountry
DcengineDataCachebuildDcaIdentifier
ConfigErrorwithMessage
SimulatorErrorHandlerhandle
SimulatorErrorHandlercreateResponse
SimulatorErrorHandlercreateResponse
AbstractTxnEngineEventGeneratorgenerateTransactionId
AbstractTxnEngineEventGeneratorgenerateType
AbstractTxnEngineEventGeneratorgenerateAmount
AbstractTxnEngineEventGeneratorgenerateUserData
AbstractTxnEngineEventGeneratorgenerateMetaData
AbstractTxnEngineEventGeneratorgenerateRandomUuid
AcknowledgementPublisherpublish
BookkeepingPublisherpublish
PartnerBankAccountStatementGeneratorgenerate
PartnerBankAccountStatementGeneratorgenerate
PartnerBankAccountStatementGeneratorgenerateType
PartnerBankAccountStatementGeneratorgenerateEngine
PartnerBankAccountStatementGeneratorgeneratePartnerBankAccountStatement
PartnerBankAccountStatementGeneratorgeneratePartnerBankCreditInfoV1
PartnerBankAccountStatementPublisherpublishMatchingEvent
PartnerBankAccountStatementPublishergetPaymentAnnouncements
PartnerBankAccountStatementPublishergenerateSimPaymentAnnouncement
PartnerBankAccountStatementPublisherpublishNonMatchingEvent
PartnerBankAccountStatementPublisherpublish
PartnerBankAccountStatementPublishergetSimDomicile
PartnerBankAccountStatementPublishergetBankAccountIban
PartnerBankAccountStatementPublisherTestbeforeEach
PartnerBankAccountStatementPublisherTestmatchingEvent
PartnerBankAccountStatementPublisherTestevent
PartnerBankAccountStatementPublisherTesthandleBatchPaymentNotFoundInSimCache
PartnerBankAccountStatementPublisherTestgenerateBatchPayment
InternalEventConsumerConfigurationinternalEventsKafkaListenerContainerFactory
InternalEventsListenerhandle
InternalEventsListenerhandle
InternalEventsListenerhandleUnknownMessages
BalanceDunningStateUpdatedEventGeneratorgenerate
BalanceDunningStateUpdatedEventGeneratorgenerate
BalanceDunningStateUpdatedEventGeneratorgetCurrencyCode
BalanceDunningStateUpdatedEventGeneratorbuildCustomerIdentifierList
BalanceDunningStateUpdatedEventGeneratorgetEventMetadata
BalanceDunningStateUpdatedEventPublisherpublish
BalanceDunningStateUpdatedEventPublishertriggerEvent
BalanceDunningStateUpdatedEventPublisherTestsetup
BalanceDunningStateUpdatedEventPublisherTesttriggerBalanceDunningStateUpdatedEventTest
ContainerDunningStateUpdatedEventGeneratorgenerate
ContainerDunningStateUpdatedEventGeneratorgenerate
ContainerDunningStateUpdatedEventGeneratorbuildCustomerIdentifiers
ContainerDunningStateUpdatedEventGeneratorgetCurrencyCode
ContainerDunningStateUpdatedEventGeneratorgetEventMetadata
ContainerDunningStateUpdatedEventPublisherpublish
ContainerDunningStateUpdatedEventPublishertriggerEvent
ContainerDunningStateUpdatedEventPublisherTestsetup
ContainerDunningStateUpdatedEventPublisherTesttriggerContainerDunningStateUpdatedEventTest
AbstractOwnerIdUpdateEventGeneratorgetCurrencyAmount
AbstractOwnerIdUpdateEventGeneratorgetCountryCode
AbstractOwnerIdUpdateEventGeneratorgetExternalIdentifier
AbstractOwnerIdUpdateEventGeneratorgetPaymentInformation
AbstractOwnerIdUpdateEventGeneratorgetEventMetadata
AbstractOwnerIdUpdateEventGeneratorgetEventType
AbstractOwnerIdUpdateEventGeneratorgetAggregateType
BalanceOwnerIdUpdatedEventGeneratorgenerate
BalanceOwnerIdUpdatedEventGeneratorcreateBalance
BalanceOwnerIdUpdatedEventGeneratorgetEventType
BalanceOwnerIdUpdatedEventGeneratorgetAggregateType
BalanceOwnerIdUpdatedEventPublisherpublish
BalanceOwnerIdUpdatedEventPublishertriggerEvent
ContainerOwnerIdUpdatedEventGeneratorgenerate
ContainerOwnerIdUpdatedEventGeneratorcreateContainer
ContainerOwnerIdUpdatedEventGeneratorgetEventType
ContainerOwnerIdUpdatedEventGeneratorgetAggregateType
ContainerOwnerIdUpdatedEventPublisherpublish
ContainerOwnerIdUpdatedEventPublishertriggerEvent
AbstractTotalUpdatedGeneratorgetEventMetadata
AbstractTotalUpdatedGeneratorgetEventMetadata
AbstractTotalUpdatedGeneratorgetEventType
AbstractTotalUpdatedGeneratorgetAggregateType
AbstractTotalUpdatedGeneratorgetCurrencyCode
AbstractTotalUpdatedGeneratorgetCurrencyAmount
AbstractTotalUpdatedGeneratorgetCountryCode
AbstractTotalUpdatedGeneratorgetExternalIdentifier
AbstractTotalUpdatedGeneratorgetPaymentInformation
AbstractTotalUpdatedGeneratorgetPayment
AbstractTotalUpdatedGeneratorgenerateRandomPaymentKrn
AbstractTotalUpdatedGeneratorgeneratePaymentExternalId
AbstractTotalUpdatedGeneratortoBalanceChange
AbstractTotalUpdatedGeneratortoBalanceChange
AbstractTotalUpdatedGeneratortoBalanceChange
AbstractTotalUpdatedGeneratorcreateBalanceChanges
AbstractTotalUpdatedGeneratorsettlementTransactionDetails
AbstractTotalUpdatedGeneratorgenerateWriteOffFeeContainerChange
AbstractTotalUpdatedGeneratorgenerateWriteOffFeeBalanceChange
AbstractTotalUpdatedGeneratorgenerateWriteOffInterestBalanceChange
AbstractTotalUpdatedGeneratorgenerateWriteOffInterestContainerChange
AbstractTotalUpdatedGeneratorcreateBalanceFromSimBalanceSeedFullySettled
BalanceTotalUpdatedEventPublisherpublish
BalanceTotalUpdatedEventPublishertriggerEvent
ContainerTotalUpdatedEventPublisherpublish
ContainerTotalUpdatedEventPublishertriggerEvent
DcaPaymentBalanceTotalUpdatedGeneratorgenerate
DcaPaymentBalanceTotalUpdatedGeneratorgetEventType
DcaPaymentBalanceTotalUpdatedGeneratorgetAggregateType
DcaPaymentBalanceTotalUpdatedGeneratorcreateBalance
DcaPaymentBalanceTotalUpdatedGeneratorgetBalanceChanges
DcaPaymentBalanceTotalUpdatedGeneratorprincipalToBalanceChange
DcaPaymentBalanceTotalUpdatedGeneratortoInterestSettled
DcaPaymentBalanceTotalUpdatedGeneratortoBalanceChange
DcaPaymentBalanceTotalUpdatedGeneratortoBalanceChange
DcaPaymentBalanceTotalUpdatedGeneratortoFeeSettled
DcaPaymentContainerTotalUpdatedGeneratorgenerate
DcaPaymentContainerTotalUpdatedGeneratorgetEventType
DcaPaymentContainerTotalUpdatedGeneratorgetAggregateType
DcaPaymentContainerTotalUpdatedGeneratorgetContainerChanges
DcaPaymentContainerTotalUpdatedGeneratorcreateContainer
DcaPaymentContainerTotalUpdatedGeneratorcreateBalance
DcaPaymentBalanceTotalUpdatedGeneratorTestbeforeEach
DcaPaymentBalanceTotalUpdatedGeneratorTestpaymentReference
DcaPaymentBalanceTotalUpdatedGeneratorTestgenerateContainerSeed
DcaPaymentContainerTotalUpdatedGeneratorTestbeforeEach
DcaPaymentContainerTotalUpdatedGeneratorTestpaymentReference
DcaPaymentContainerTotalUpdatedGeneratorTestgetPaymentMethodForAnySettledInUpdatedChanges
DcaPaymentContainerTotalUpdatedGeneratorTestgenerateContainerSeed
DebtItemChangesBalanceTotalUpdatedGeneratorgenerate
DebtItemChangesBalanceTotalUpdatedGeneratorgetBalanceChanges
DebtItemChangesBalanceTotalUpdatedGeneratortoBalanceChange
DebtItemChangesBalanceTotalUpdatedGeneratortoBalanceChange
DebtItemChangesBalanceTotalUpdatedGeneratortoBalanceChange
DebtItemChangesBalanceTotalUpdatedGeneratorgetEventType
DebtItemChangesBalanceTotalUpdatedGeneratorgetAggregateType
DebtItemChangesContainerTotalUpdatedGeneratorgenerate
DebtItemChangesContainerTotalUpdatedGeneratorgetContainerChanges
DebtItemChangesContainerTotalUpdatedGeneratorcontainerInterestToContainerChange
DebtItemChangesContainerTotalUpdatedGeneratorcontainerFeeToContainerChange
DebtItemChangesContainerTotalUpdatedGeneratorbalanceChangesToContainerChange
DebtItemChangesContainerTotalUpdatedGeneratorcreateBalanceTotalUpdateWithChanges
DebtItemChangesContainerTotalUpdatedGeneratorgeneratePrincipalAdjustedChange
DebtItemChangesContainerTotalUpdatedGeneratorgenerateBalanceSettledChanges
DebtItemChangesContainerTotalUpdatedGeneratorgetEventType
DebtItemChangesContainerTotalUpdatedGeneratorgetAggregateType
PartialPaymentBalanceTotalUpdatedGeneratorgenerateBalanceTotalUpdatedEvent
PartialPaymentBalanceTotalUpdatedGeneratorgenerateBalanceTotalUpdatedEvent
PartialPaymentBalanceTotalUpdatedGeneratorgenerateBalanceTotalUpdatedEvent
PartialPaymentBalanceTotalUpdatedGeneratorcreateBalanceFromSimBalanceSeed
PartialPaymentBalanceTotalUpdatedGeneratorgetBalanceChanges
PartialPaymentBalanceTotalUpdatedGeneratorgetBalanceChanges
PartialPaymentBalanceTotalUpdatedGeneratortoBalanceChange
PartialPaymentBalanceTotalUpdatedGeneratortoBalanceChange
PartialPaymentBalanceTotalUpdatedGeneratortoBalanceChange
PartialPaymentBalanceTotalUpdatedGeneratorgetEventType
PartialPaymentBalanceTotalUpdatedGeneratorgetAggregateType
PartialPaymentContainerTotalUpdatedGeneratorgenerateContainerTotalUpdatedEvent
PartialPaymentContainerTotalUpdatedGeneratorgenerateContainerTotalUpdatedEvent
PartialPaymentContainerTotalUpdatedGeneratorgenerateContainerTotalUpdatedEvent
PartialPaymentContainerTotalUpdatedGeneratorgetEventType
PartialPaymentContainerTotalUpdatedGeneratorgetAggregateType
PartialPaymentContainerTotalUpdatedGeneratorgetContainerChanges
PartialPaymentContainerTotalUpdatedGeneratorgetContainerChanges
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratorcreateBalanceTotalUpdatedWithChanges
PartialPaymentContainerTotalUpdatedGeneratorcreateBalanceFromSimBalanceSeed
AbstractReturningsGeneratorgetBalanceChanges
AbstractReturningsGeneratortoBalanceChange
AbstractReturningsGeneratortoBalanceChange
AbstractReturningsGeneratorcreateBalanceFromSimBalanceSeed
ReturningsBalanceTotalUpdatedGeneratorgenerate
ReturningsBalanceTotalUpdatedGeneratorgenerate
ReturningsBalanceTotalUpdatedGeneratorgetEventType
ReturningsBalanceTotalUpdatedGeneratorgetAggregateType
ReturningsBalanceTotalUpdatedGeneratorTestbeforeEach
ReturningsBalanceTotalUpdatedGeneratorTestbalance0Percent
ReturningsBalanceTotalUpdatedGeneratorTestbalance25Percent
ReturningsBalanceTotalUpdatedGeneratorTestbalance50Percent
ReturningsBalanceTotalUpdatedGeneratorTestbalance50PercentMultiple
ReturningsBalanceTotalUpdatedGeneratorTestbalance100Percent
ReturningsBalanceTotalUpdatedGeneratorTestgenerateBalanceSeed
ReturningsContainerTotalUpdatedGeneratorgenerate
ReturningsContainerTotalUpdatedGeneratornotFound
ReturningsContainerTotalUpdatedGeneratorgenerate
ReturningsContainerTotalUpdatedGeneratorgetContainerChanges
ReturningsContainerTotalUpdatedGeneratortoContainerChange
ReturningsContainerTotalUpdatedGeneratortoContainerChange
ReturningsContainerTotalUpdatedGeneratorcreateBalanceTotalUpdateWithChanges
ReturningsContainerTotalUpdatedGeneratorgenerateListPrincipalAdjusted
ReturningsContainerTotalUpdatedGeneratorgetEventType
ReturningsContainerTotalUpdatedGeneratorgetAggregateType
ReturningsContainerTotalUpdatedGeneratorTestbeforeEach
ReturningsContainerTotalUpdatedGeneratorTestcontainerSanity
ReturningsContainerTotalUpdatedGeneratorTestcontainerSanityTestWith100Percentage
ReturningsContainerTotalUpdatedGeneratorTestcontainerSanityTestWith0Percentage
ReturningsContainerTotalUpdatedGeneratorTestgenerateContainerSeed
PartialPaymentBalanceTotalUpdatedGeneratorTestbefore
PartialPaymentBalanceTotalUpdatedGeneratorTestpaymentExternalId
PartialPaymentBalanceTotalUpdatedGeneratorTestsetUpSimClaimSeed
PartialPaymentBalanceTotalUpdatedGeneratorTestextractPaymentExternalId
PartialPaymentContainerTotalUpdatedGeneratorTestbefore
PartialPaymentContainerTotalUpdatedGeneratorTesttotalAmountSanity
PartialPaymentContainerTotalUpdatedGeneratorTestpaymentExternalId
PartialPaymentContainerTotalUpdatedGeneratorTestsetUpSimClaimSeed
PartialPaymentContainerTotalUpdatedGeneratorTestextractPaymentExternalId
AcknowledgementHandlersendSubledgerAcknowledgementBooked
AcknowledgementHandlersendSubledgerAcknowledgementNotBooked
AcknowledgementHandlergenerateAcknowledgementBookedEvent
AcknowledgementHandlergenerateAcknowledgementNotBookedEvent
AssignDebtCollectionDateHandlerhandle
AssignDebtCollectionDateHandlerhandle
BalanceDunningStateUpdatedHandlerhandle
BalanceDunningStateUpdatedHandlerTestsetup
BalanceDunningStateUpdatedHandlerTestverifyContainerTriggerHandlerTest
BalanceTotalUpdatedEventGeneratorgetEventType
BalanceTotalUpdatedEventGeneratorgetAggregateType
BalanceTotalUpdatedEventGeneratorgenerateBalanceTotalUpdatedWriteOffEvent
BalanceTotalUpdatedEventGeneratorgenerateWriteOffBalanceContainerChanges
BalanceTotalUpdatedEventGeneratorcreateBalance
BookkeepingHandlersendBookkeepingEvent
BookkeepingHandlergenerateBookkeepingEvent
BookkeepingHandlerbuildProviderTransactionData
BookkeepingHandlergetAmount
BucketServiceHandlergetBucket
BulkClaimSeedHandlerhandle
BulkClaimSeedHandlerhandle
BulkClaimSeedHandlercreateSeedForDcaClient
BulkClaimSeedHandlercreateSeedForAssignmentRule
BulkClaimSeedHandlerhasAssignmentRule
BulkClaimSeedHandlergenerateClaimSeeds
BulkClaimSeedHandlergenerateStatementBundleSeed
BulkClaimSeedHandlergenerateStatementBundleSeed
BulkClaimSeedHandlercreateBundleOnBehalfOfDOS
BulkClaimSeedHandlergenerateBundleRequestBalance
BulkClaimSeedHandlergetSomeSimClaimSeeds
BulkClaimSeedHandlerrequireProduct
BulkClaimSeedHandlersendSeedEvent
BulkClaimSeedHandlergenerateOrganisationSeeds
BulkClaimSeedHandlergenerateOrganisationBalanceSeed
BulkClaimSeedHandlerrandomClaimForDcaClient
BulkClaimSeedHandlerrandomClaimForAssignmentRule
BulkClaimSeedHandlergetCountryCode
BulkClaimSeedHandlergetMerchant
BulkClaimSeedHandlergetOwner
BulkClaimSeedHandlergetProduct
BulkClaimSeedHandlerisOrganisation
BulkClaimSeedHandlerTestbefore
BulkClaimSeedHandlerTestassignmentRuleBalance
BulkClaimSeedHandlerTestassignmentRuleBalance2
BulkClaimSeedHandlerTestassignmentRuleBalance3
BulkClaimSeedHandlerTestassignmentRuleContainer
BulkClaimSeedHandlerTestverifyBulkSeedHandlerSeedsContainerProductsProperly
BulkClaimSeedHandlerTestverifyBulkSeedHandlerSeedsBalanceProductsProperly
BulkClaimSeedHandlerTestverifyBulkSeedHandlerFiltersOutDcaGroupsWithoutAssignmentRule
BulkClaimSeedHandlerTestbulkSeed_FilterByDcaId
BulkClaimSeedHandlerTestgetDca
BulkTotalUpdateHandlerhandle
BulkTotalUpdateHandlerfetchClaimByKrn
BulkTotalUpdateHandlergetNextInt
BulkTotalUpdateHandlerTestbefore
BulkTotalUpdateHandlerTestprepareCacheClaim
BulkTotalUpdateHandlerTestpartialPaymentSanity
BulkTotalUpdateHandlerTestfullReturnSanity
BulkTotalUpdateHandlerTestverifyAllHandledClaimComesFromCache
ChangeOwnerHandlerhandleChangeOwner
CommunicationsHistoryHandlergetSendouts
CommunicationsHistoryHandlerretrieveSendout
CommunicationsHistoryHandlergetFile
ContainerDunningStateUpdateHandlerhandle
ContainerDunningStateUpdateHandlerTestsetup
ContainerDunningStateUpdateHandlerTestverifyContainerTriggerHandlerTest
ContainerTotalUpdatedEventGeneratorgetEventType
ContainerTotalUpdatedEventGeneratorgetAggregateType
ContainerTotalUpdatedEventGeneratorgenerateWriteOffEvent
ContainerTotalUpdatedEventGeneratorgenerateWriteOffContainerChanges
ContainerTotalUpdatedEventGeneratorgenerateWriteOffBalanceContainerChanges
ContainerTotalUpdatedEventGeneratorcreateBalance
DebtItemChangeHandlerhandle
DebtItemChangeHandleremitChanges
FullReturnHandleremitFullReturn
FullReturnHandleremitFullReturn
FullReturnHandleremitFullReturn
FullReturnHandleremitFullReturn
FullReturnHandlerzeroOutstanding
FullReturnHandlerTestbefore
FullReturnHandlerTestcontainerSanity
FullReturnHandlerTestbalanceSanity
FullReturnHandlerTestsetUpSalWithContainer
FullReturnHandlerTestsetUpSalWithBalance
GetClaimHandlerhandle
GetClaimHandlerhandle
GetClaimHandlergetClaimV2
GetClaimHandlertoSimDebtItem
GetClaimHandlertoSimPurchase
GetClaimHandlertoSimSendout
GetClaimHandlertoSimLineItem
GetClaimHandlertoSimPurchaseAddress
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPaymentForBundle
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPayment
PartialReturnHandleremitPartialReturn
PartialReturnHandleremitPartialReturn
PartialReturnHandlerpublishBalanceEvents
PartialReturnHandlerpublishContainerEvents
PartialReturnHandlergetContainerBalances
PartialReturnHandlergetBalances
PartialReturnHandlersetOriginalAmount
PartialReturnHandlerzeroOutstanding
PartialReturnHandlerTestbefore
PartialReturnHandlerTestcontainerSanity
PartialReturnHandlerTestbalanceSanity
PartialReturnHandlerTestsetUpSalWithContainer
PartialReturnHandlerTestsetUpSalWithBalance
PlaceClaimHandlerhandlePlaceClaim
PlaceClaimHandlerTestbefore
PlaceClaimHandlerTestsanity
RecallClaimHandlerhandleRecall
RecallClaimHandlerconfirmClaimRecall
RecallClaimHandlerconfirmClaimRecall
StatementBundleEvaluatorshouldCreateStatementBundle
StopOutsourcingByCreditorHandlerhandle
StopOutsourcingByCreditorHandlerextracted
StopOutsourcingByCreditorHandlerTestbefore
StopOutsourcingByCreditorHandlerTestautomaticStopOutsourcingByDcaSanity
StopOutsourcingByCreditorHandlerTestnoneAutomaticStopOutsourcingByDcaSanity
StopOutsourcingByDcaHandlerhandle
StopOutsourcingByDcaHandlerhandleCreditorInitiatedStopOutsourcing
StopOutsourcingByDcaHandlerzeroContainer
StopOutsourcingByDcaHandlerTestbefore
StopOutsourcingByDcaHandlerTestsanity
StopOutsourcingReversedByDcaHandlerhandle
BatchPaymentApproveHandlerhandle
BatchPaymentHandlerstartBatchPaymentForDcaClient
BatchPaymentHandlerstopBatchPayment
BatchPaymentHandlerapproveBatchPayment
BatchPaymentHandlersendMatchingBankAccountStatement
BatchPaymentHandlersendNonMatchingBankAccountStatement
BatchPaymentHandlerannouncePayment
BatchPaymentHandlerstorePaymentAnnouncementInSim
BatchPaymentHandlerreverseAnnouncePayment
BatchPaymentHandlerrunBatchPaymentsForAllDcaClients
BatchPaymentHandlermakeStartBatchPaymentCall
BatchPaymentHandlermakeStopBatchPaymentCall
BatchPaymentHandlermakeApproveBatchPaymentCall
BatchPaymentHandlertoSimPaymentAnnouncementV2
BatchPaymentHandlerwithValidVersion
BatchPaymentHandlerwithValidVersion
BatchPaymentHandlercheckVersion
BatchPaymentPublishedEventHandlerhandle
BatchPaymentPublishedEventHandlerisContainer
BatchPaymentPublishedEventHandlergetSimSeed
BatchPaymentStoppedEventHandlerhandle
AddressGeneratorgetRandomAddress
ClaimEnrichedHandlerhandle
ClaimSeedGeneratorgenerateContainerSeed
ClaimSeedGeneratorgenerateBalanceSeed
ClaimSeedGeneratorgenerateBalanceSeed
ClaimSeedGeneratorgenerateBalanceSeed
ClaimSeedGeneratoraddSimCommunicationsHistorySeed
ClaimSeedGeneratorbalanceToOsisSeed
ClaimSeedGeneratorsetupFixedSumCredit
ClaimSeedGeneratorbalanceToOsisSeed
ClaimSeedGeneratorisOrganisationToOsis
DecisionStoreEnrichmentHandlergetDecisionStoreResponse
DecisionStoreEnrichmentHandlercreatePolicyRequest
KlarnaCardGatewayHandlerhandle
KlarnaCardGatewayHandlerreadFile
KlarnaCardGatewayHandlerreadTemplateFromInputStream
KlarnaCardGatewayHandlerreplaceTemplateVariables
KlarnaCardGatewayHandlerreplaceVariable
KlarnaCardGatewayHandlerTesthandle_personaWithCard_sanityTest
OsisEnrichmentHandlergetOsisPayload
OsisEnrichmentHandlergetPayloadTemplate
OsisEnrichmentHandlerreplaceTemplateVariables
OsisEnrichmentHandlerfillVariables
OsisEnrichmentHandlerfillNullValues
OsisEnrichmentHandlerfillPersonaKrn
OsisEnrichmentHandlergetFormattedValue
OsisEnrichmentHandlerreadFile
OsisEnrichmentHandlerreplaceVariable
OsisEnrichmentHandlerTestnullValuesShouldBePopulated
OsisEnrichmentHandlerTestgivenValuesShouldBePopulated
PersonaEnrichmentHandlergetPersonaPayload
PersonaEnrichmentHandlergetPayloadTemplate
PersonaEnrichmentHandlerreplaceTemplateVariables
PersonaEnrichmentHandlerfillVariables
PersonaEnrichmentHandlergetFormattedValue
PersonaEnrichmentHandlerapplyNullValues
PersonaEnrichmentHandlerfillPersonaKrn
PersonaEnrichmentHandlerreplaceVariable
PersonaEnrichmentHandlerreadFile
PersonaEnrichmentHandlerTestdefaultTemplate_shouldSetPersonaKrnFromPersonaId
SalEnrichmentHandlerV1getContainer
SalEnrichmentHandlerV1getContainerBalances
SalEnrichmentHandlerV1getContainerInterests
SalEnrichmentHandlerV1getInterestsForContainerParent
SalEnrichmentHandlerV1createInterestFromSimInterest
SalEnrichmentHandlerV1getFeesForResource
SalEnrichmentHandlerV1getCurrencyCode
SalEnrichmentHandlerV1createFeeFromSimFee
SalEnrichmentHandlerV1createBalanceFromSimBalance
SalEnrichmentHandlerV1formatInstant
SalEnrichmentHandlerV1getCurrencyCodeFromAggregateKrn
SalEnrichmentHandlerV1getCurrencyCodeFromCountryCode
SalEnrichmentHandlerV1changeOwnerOfAggregateKrn
SalEnrichmentHandlerV1setDunningState
SalEnrichmentHandlerV1writeOffContainer
SalEnrichmentHandlerV1writeOffBalance
SalEnrichmentHandlerV1Testsetup
SalEnrichmentHandlerV1TestgetContainerInterestsShouldReturnTheCorrectAmountOfInterests
SalEnrichmentHandlerV1TestchangeOwnerIdOfContainerIdSanity
SalEnrichmentHandlerV1TestchangeOwnerIdOfBalanceIdSanity
SalEnrichmentHandlerV1TestsetContainerDunningStateSanity
SalEnrichmentHandlerV1TestsetBalanceDunningStateSanity
SalEnrichmentHandlerV2getBalance
SalEnrichmentHandlerV2getBalanceResponseBodyFromContainer
SalEnrichmentHandlerV2findSeedByNoneStandaloneBalanceId
SalEnrichmentHandlerV2createBalanceFromSimBalance
SalEnrichmentHandlerV2getInterestSummary
SalEnrichmentHandlerV2moneyAdditionOperator
SalEnrichmentHandlerV2toInterestDetail
SalEnrichmentHandlerV2getMoney
SalEnrichmentHandlerV2formatInstant
SalEnrichmentHandlerV2getCurrencyCodeFromAggregateKrn
SalEnrichmentHandlerV2getCurrencyCodeFromCountryCode
ServiceClaimRemainingAmountHelpergetClaimRemainingAmount
ServiceClaimRemainingAmountHelperTestbefore
ServiceClaimRemainingAmountHelperTestsanity
ServiceClaimRemainingAmountHelperTestnoPrincipalShouldNotThrowException
SimBatchPaymentstorePaymentAnnouncement
SimBatchPaymentgetPaymentAnnouncement
SimBatchPaymentgetAnnouncedButNotReversedAmount
SimBatchPaymentTestannouncedAmount
SimBatchPaymentTestreversePaymentAnnouncementAndVerifyAmount
SimBatchPaymentTestgenerateDcaReference
SimClaimplace
SimClaimstoreStopOutsourcingByCreditor
SimClaimstoreStopOutsourcingByDca
SimClaimstoreDebtItemChange
SimClaimstorePaymentAnnouncement
SimClaimstoreDebtItem
SimClaimstoreSendout
SimClaimgetUnpaidAmount
SimClaimgetDebtItemChangeAmount
SimClaimTestoriginalAndRemainingAmounts
SimClaimTestunpaidAmountSettlement
SimClaimTestunpaidAmountReversedPaymentAnnouncement
SimClaimTestunpaidAmountAfterChanges
SimClaimTestminimalSimClaim
SimCustomerIdentifiersetIdentifierType
SimDcaaddSimDcaClient
SimDcagetSimDcaClient
SimDcaclients
SimDcahasEndpoint
SimDcagetSimDcaClients
SimDcaClientKeygetCombinedKey
SimDcaClientKeyTestequals
SimDcaEndpointsetDcaRegistrationVersion
SimDcaGroupsetHttpStatus
SimDcaGroupaddSimDca
SimDcaGroupgetSimDca
SimDcaGroupgetSimDcas
SimDomicilecountryCode
SimDomicilecurrencyCode
SimDomiciledistributedNin
SimDomicilefromCountryCode
SimPaymentAnnouncementreverse
OsisTemplatesfromName
SimBalanceSeedgetAmount
SimClaimSeedgetAggregateKrn
SimClaimSeedgetType
SimCommunicationsHistorySeedtoCommunication
SimContainerSeedgetTotalAmount
SimUtilsgenerateRandomInt
AbstractRefDataCacheSeedersetCache
AbstractRefDataCacheSeedersetDependencyCache
AbstractRefDataCacheSeederseedCache
AbstractRefDataCacheSeedergetSimDcaGroups
AbstractRefDataCacheSeedergetProductIds
AbstractRefDataCacheSeederseedProducts
AbstractRefDataCacheSeederseedDcaGroups
AbstractRefDataCacheSeederseedNonCapitalizables
AbstractRefDataCacheSeederseedBankAccounts
EndpointGeneratorcreatedEndpoint
EndpointGeneratorcreateHeaders
RefDataManagerseedAndLoad
RefDataManagerTestbeforeEach
RefDataManagerTestsystemTest
RefDataManagerTesttestDcaEU
RefDataManagerTesttestDcaUS
RefDataManagerTestsystemTestAndDcaIntegration
SimRefDataLoaderloadRefData
SimRefDataLoaderloadProducts
SimRefDataLoaderloadDcaGroups
SimRefDataLoaderloadDcas
SimRefDataLoaderloadDcaClients
SimRefDataLoaderloadDcaEndpoints
SimRefDataLoaderloadClaimAssignmentRules
SimRefDataLoaderloadNonCapitalisables
SimRefDataLoaderloadBankAccounts
SimRefDataLoadertoApi
SimRefDataLoadertoApi
SimRefDataLoadertoApiRef
SimRefDataLoadertoApi
SimRefDataLoadertoApiRef
SimRefDataLoadertoApi
SimRefDataLoadertoApiV2
SystemTestRefDataCacheSeedergetProductIds
SystemTestRefDataCacheSeedergetSimDcaGroups
SystemTestRefDataCacheSeederTestbeforeEach
SystemTestRefDataCacheSeederTestsetUpSanity
TestDcaRefDataCacheSeederEUgetProductIds
TestDcaRefDataCacheSeederEUgetSimDcaGroups
TestDcaRefDataCacheSeederEUgetDcas
TestDcaRefDataCacheSeederEUdcaClientName
TestDcaRefDataCacheSeederEUgetClients
TestDcaRefDataCacheSeederUSgetProductIds
TestDcaRefDataCacheSeederUSgetSimDcaGroups
TestDcaRefDataCacheSeederUSgetTrueAccordDca
TestDcaRefDataCacheSeederUSgetTrueAccordDcaClients
AssignDebtCollectionDateTriggergetDelay
AssignDebtCollectionDateTriggerrun
BatchPaymentApproveTriggergetDelay
BatchPaymentApproveTriggerrun
CreditorInitiatedStopOutsourcingTriggergetDelay
CreditorInitiatedStopOutsourcingTriggerrun
GetClaimTriggergetDelay
GetClaimTriggerrun
RecallClaimTriggergetDelay
RecallClaimTriggerrun
TriggerDetailsServicegetDelay
TriggerSchedulerpostConstruct
TriggerSchedulerschedule
TriggersConfigurationsetTriggers
TriggerConfigurationsetDelay
Applicationmain
ApplicationTestcontextLoads
ReferenceUtilsgenerateInvoiceNumber
ReferenceUtilsgeneratePaymentReference
ReferenceUtilsgenerateExternalIdKrn
ReferenceUtilsgenerateUserAccountPersonaKrn
ReferenceUtilsgenerateKredAuthorizationKrn
ReferenceUtilsgenerateKredMonthlyContainerKrn
ReferenceUtilsgenerateKredBalanceKrn
ReferenceUtilsgenerateKredFeeKrn
ReferenceUtilsgenerateKredInterestKrn
ReferenceUtilsjoinElements
ReferenceUtilsgenerateKredKrn
ReferenceUtilsgenerateKrn
ReferenceUtilsTestgenerateInvoiceNumber
ReferenceUtilsTestgeneratePaymentReference
ReferenceUtilsTestgenerateKredBalanceKrn
ReferenceUtilsTestgenerateKredAuthorizationKrn
TestContextcreateSimClaimSeed
TestContextcreatePaymentAnnouncement
TestContextcreateSimBatchPayment
TestContextcreateDebtItem
TestContextcreateDebtItemChange
BalanceAllocationsetByType
BalanceSettlementAllocationServicebalanceSettlementAllocation
BalanceSettlementAllocationServiceTestbefore
BalanceSettlementAllocationServiceTestallocationNotExceedOutstandingPrinciple
BalanceSettlementAllocationServiceTestallocationNotExceedOutstandingFee
BalanceSettlementAllocationServiceTestallocationNotExceedOutstandingInterest
BalanceSettlementAllocationServiceTestallocationExceedTotalOutStandingAmount
BalanceSettlementAllocationServiceTestallocationShouldHandleNullInsettlementAmount
BalanceSettlementAllocationServiceTestsetUpSimClaimSeed
ContainerAllocationsetByType
ContainerSettlementAllocationServicecontainerSettlementAllocation
ContainerSettlementAllocationServiceTestbefore
ContainerSettlementAllocationServiceTestallocationNotExceedOutstandingPrinciple
ContainerSettlementAllocationServiceTestallocationNotExceedOutstandingFee
ContainerSettlementAllocationServiceTestallocationNotExceedOutstandingInterest
ContainerSettlementAllocationServiceTestallocationExceedTotalOutStandingAmount
ContainerSettlementAllocationServiceTestallocationShouldHandleNullInsettlementAmount
ContainerSettlementAllocationServiceTestsetUpSimClaimSeed
ResponseCodeProvokerverify
ResponseCodeProvokerverify
ResponseCodeProvokerTestbeforeEach
ResponseCodeProvokerTestdcaGroupOk
ResponseCodeProvokerTestdcaGroupBadRequest
ResponseCodeProvokerTestdependencyOk
ResponseCodeProvokerTestdependencyBadRequest
VersionValidatorverify
BucketServiceMockEndpointgetBucket
CommunicationsHistoryMockEndpointgetCommunicationsContents
CommunicationsHistoryMockEndpointgetCommunications
DcaExternalMockEndpointplaceClaim
DcaExternalMockEndpointstopOutsourcingV2
DcaExternalMockEndpointping
DcaExternalMockEndpointrecall
DcaExternalMockEndpointbatchPaymentDetails
DcaExternalMockEndpointannounceDebtItemChanges
DcaMockAdminEndpointregister
DecisionStoreMockEndpointgetDecisionObjects
KlarnaCardGatewayMockEndpointgetPersonaResult
KlarnaCardGatewayMockEndpointTestgetPersonaResult_externalReferenceId_sanityTest
KlarnaCardGatewayMockEndpointTestgetPersonaResult_externalReferenceKrn_sanityTest
OsisMockEndpointgetOsisResult
PaymentsBundlerMockEndpointcreatePaymentBundle
PaymentsBundlerMockEndpointrandomSST
PersonaMockEndpointgetPersonaResult
PurchaseTokenEndpointgetContainerBalances
SalMockEndpointV1getContainerBalances
SalMockEndpointV1getContainerFees
SalMockEndpointV1getContainerInterests
SalMockEndpointV1getContainer
SalMockEndpointV1getFeesFromBalance
SalMockEndpointV1changeOwnerOfContainerId
SalMockEndpointV1changeOwnerOfBalanceId
SalMockEndpointV1setContainerDunningState
SalMockEndpointV1setBalanceDunningState
SalMockEndpointV1writeOffContainer
SalMockEndpointV1writeOffBalance
SalMockEndpointV2getBalance
SimulatorClaimEndpointgetSimClaimByClaimId
SimulatorClaimEndpointstopOutsourcing
SimulatorClaimEndpointstopOutsourcingReverse
SimulatorClaimEndpointsendPartialPayment
SimulatorClaimEndpointsendMultiplePartialPayments
SimulatorClaimEndpointsendPartialReturn
SimulatorClaimEndpointsendFullReturn
SimulatorClaimEndpointsendDebtItemChanges
SimulatorClaimEndpointproductMarketSeed
SimulatorClaimEndpointbulkSeed
SimulatorClaimEndpointbulkSettlements
SimulatorClaimEndpointbadRequest
SimulatorEndpointclearCaches
SimulatorEndpointstoreSeed
SimulatorEndpointsendDunningStateUpdatedEvents
SimulatorEndpointgetSimClaimSeedByAggregateKrn
SimulatorEndpointgetDcaGroups
SimulatorEndpointpostBundle
SimulatorEndpointrunBatchPaymentsForAllDcaClients
SimulatorEndpointgetBatchPaymentsForDcaClient
SimulatorEndpointstartBatchPaymentForDcaClient
SimulatorEndpointannouncePayment
SimulatorEndpointreverseAnnouncedPayment
SimulatorEndpointstopBatchPayment
SimulatorEndpointsendMatchingBankAccountStatement
SimulatorEndpointsendBookkeepingEventToGenerateAcknowledgement
SimulatorEndpointsendSubledgerAcknowledgementBooked
SimulatorEndpointsendSubledgerAcknowledgementNotBooked
SimulatorEndpointsendNonMatchingBankAccountStatment
SimulatorEndpointputSimDependencyHttpStatus
SimulatorEndpointping
SimulatorEndpointchangeOwnership
SimulatorEndpointgetRegisteredEndpointVersion
SimulatorRefDataEndpointgetSimProducts
SimulatorRefDataEndpointgetSimBankAccounts
SimulatorRefDataEndpointgetSimDca
SimulatorRefDataEndpointputSimDcaGroupHttpStatus
SimulatorRefDataEndpointrefDataLoad
ReferenceNotFoundExceptiongetReference
SimBatchPaymentCacheclear
SimBatchPaymentCachestoreBatchPayment
SimBatchPaymentCachegetBatchPaymentsForDcaClient
SimBatchPaymentCacheensureListForCombinedKey
SimBatchPaymentCachegetSimBatchPayment
SimBatchPaymentCacheTestbeforeEach
SimBatchPaymentCacheTestgetSimBatchPayment
SimClaimCacheclear
SimClaimCachegetClaimsByBatchId
SimClaimCachestoreClaim
SimClaimCachecreateClaimFromSeed
SimClaimCachestorePlacement
SimClaimCachestoreDebtItemChanges
SimClaimCachestoreDebtItemChanges
SimClaimCachegetClaimById
SimClaimCachegetClaimIdFromCache
SimClaimCachegetSimClaimsWithPositivePaymentAnnouncementAmounts
SimClaimCacherecallClaim
SimClaimCacheTestbeforeEach
SimClaimCacheTeststorePlacement
SimClaimCacheTestpositiveSettlementAmount
SimClaimCacheTestgetFromCache
SimDependencyCacheaddSimDependency
SimDependencyCachegetDependencyHttpStatus
SimDependencyCachesetDependencyHttpStatus
SimDependencyCachegetDependencies
SimDependencyCacheTestbeforeEach
SimDependencyCacheTestfindSeedForSalStandAloneBalance
SimRefDataCacheaddSimProduct
SimRefDataCachegetSimProduct
SimRefDataCachegetSimProducts
SimRefDataCacheaddSimDcaGroup
SimRefDataCacheaddSimNonCapitalizables
SimRefDataCacheaddSimBankAccount
SimRefDataCachegetSimBankAccounts
SimRefDataCachegetSingleSimBankAccount
SimRefDataCachegetSimNonCapitalizables
SimRefDataCachegetSimDcaGroup
SimRefDataCachegetSimDcaGroups
SimRefDataCachegetDcaGroupHttpStatus
SimRefDataCachesetDcaGroupHttpStatus
SimRefDataCachegetSimDomicile
SimRefDataCacheTestbeforeEach
SimRefDataCacheTestnoBankAccount
SimRefDataCacheTestoneBankAccount
SimRefDataCacheTestmultipleBankAccounts
SimSeedCacheclear
SimSeedCachestoreSeed
SimSeedCachegetIdFromIdentifier
SimSeedCachegetPersonaId
SimSeedCachegetPersonaId
SimSeedCachegetCustomerIdentifier
SimSeedCachecreateOsisSeed
SimSeedCachenotExistsInSimOsisSeeds
SimSeedCachegetSeedByAnyRef
SimSeedCachegetSeedByAnyRefOrBackFill
SimSeedCachebackfillContainer
SimSeedCachebackfillBalance
SimSeedCachebuildVariables
SimSeedCacheTestbeforeEach
SimSeedCacheTestfindSeedForSalStandAloneBalance
SimSeedCacheTestfindSeedForContainer
SimSeedCacheTestfindSeedForBalanceInContainer
SimSeedCacheTestbackfill
SimSeedCacheTestcreateContainerWithBalanceSeed
SimSeedCacheTestcreateStandaloneBalanceSeed
SimSeedCacheTestcreateSalWithContainer
SimSeedCacheTestcreateSalWithBalance
SimSeedCacheTestcreateSimBalanceSeed
SimSeedCacheTestcreateSimContainerSeed
SimSeedCacheTestcreateKrn
ProductTypefromProduct
ProductTypefromOwner
ProductTypefromProduct
ProductTypegetOwner
ProductTypegetProduct
ProductTypegetIsOrganization
ProductTypeTestfromProductTest
ProductTypeTestfromTermsOwnerTest
ProductTypeTestfromProductInvalidParameter
ProductTypeTestfromTermsOwnerInvalidParameter
ProductTypeTestfromProductNullParameter
ProductTypeTestfromTermsOwnerNullParameter
AssignmentRequestListenerhandle
AssignmentRequestListenergetDcaAssignedEvent
AssignmentRequestListenerdefaultAssignment
AssignmentRequestListenergetFromCache
AssignmentRequestListenergetEvent
AssignmentRequestListenergetSpecificEvent
AssignmentRequestListenerhandle
AssignmentRequestListenerhandleUnknownMessages
AssignmentRequestListenerbuildDcaIdentifier
AssignmentRequestListenerexportEventBuilder
AssignmentRequestListenerbuildMetadata
AssignmentRequestListenerConsumerConfiginternalEventsKafkaListenerContainerFactory
DcengineApiupdateDesiredAssignment
DcengineApideleteAssignment
DcengineDataCacheinit
DcengineDataCacheaddByAggregateKrn
DcengineDataCachegetAssignment
DcengineDataCacheremoveAssignment
DcengineDataCachegetDcaForCountry
DcengineDataCacheupdateDcaForCountry
DcengineDataCachebuildDcaIdentifier
ConfigErrorwithMessage
SimulatorErrorHandlerhandle
SimulatorErrorHandlercreateResponse
SimulatorErrorHandlercreateResponse
AbstractTxnEngineEventGeneratorgenerateTransactionId
AbstractTxnEngineEventGeneratorgenerateType
AbstractTxnEngineEventGeneratorgenerateAmount
AbstractTxnEngineEventGeneratorgenerateUserData
AbstractTxnEngineEventGeneratorgenerateMetaData
AbstractTxnEngineEventGeneratorgenerateRandomUuid
AcknowledgementPublisherpublish
BookkeepingPublisherpublish
PartnerBankAccountStatementGeneratorgenerate
PartnerBankAccountStatementGeneratorgenerate
PartnerBankAccountStatementGeneratorgenerateType
PartnerBankAccountStatementGeneratorgenerateEngine
PartnerBankAccountStatementGeneratorgeneratePartnerBankAccountStatement
PartnerBankAccountStatementGeneratorgeneratePartnerBankCreditInfoV1
PartnerBankAccountStatementPublisherpublishMatchingEvent
PartnerBankAccountStatementPublishergetPaymentAnnouncements
PartnerBankAccountStatementPublishergenerateSimPaymentAnnouncement
PartnerBankAccountStatementPublisherpublishNonMatchingEvent
PartnerBankAccountStatementPublisherpublish
PartnerBankAccountStatementPublishergetSimDomicile
PartnerBankAccountStatementPublishergetBankAccountIban
PartnerBankAccountStatementPublisherTestbeforeEach
PartnerBankAccountStatementPublisherTestmatchingEvent
PartnerBankAccountStatementPublisherTestevent
PartnerBankAccountStatementPublisherTesthandleBatchPaymentNotFoundInSimCache
PartnerBankAccountStatementPublisherTestgenerateBatchPayment
InternalEventConsumerConfigurationinternalEventsKafkaListenerContainerFactory
InternalEventsListenerhandle
InternalEventsListenerhandle
InternalEventsListenerhandleUnknownMessages
BalanceDunningStateUpdatedEventGeneratorgenerate
BalanceDunningStateUpdatedEventGeneratorgenerate
BalanceDunningStateUpdatedEventGeneratorgetCurrencyCode
BalanceDunningStateUpdatedEventGeneratorbuildCustomerIdentifierList
BalanceDunningStateUpdatedEventGeneratorgetEventMetadata
BalanceDunningStateUpdatedEventPublisherpublish
BalanceDunningStateUpdatedEventPublishertriggerEvent
BalanceDunningStateUpdatedEventPublisherTestsetup
BalanceDunningStateUpdatedEventPublisherTesttriggerBalanceDunningStateUpdatedEventTest
ContainerDunningStateUpdatedEventGeneratorgenerate
ContainerDunningStateUpdatedEventGeneratorgenerate
ContainerDunningStateUpdatedEventGeneratorbuildCustomerIdentifiers
ContainerDunningStateUpdatedEventGeneratorgetCurrencyCode
ContainerDunningStateUpdatedEventGeneratorgetEventMetadata
ContainerDunningStateUpdatedEventPublisherpublish
ContainerDunningStateUpdatedEventPublishertriggerEvent
ContainerDunningStateUpdatedEventPublisherTestsetup
ContainerDunningStateUpdatedEventPublisherTesttriggerContainerDunningStateUpdatedEventTest
AbstractOwnerIdUpdateEventGeneratorgetCurrencyAmount
AbstractOwnerIdUpdateEventGeneratorgetCountryCode
AbstractOwnerIdUpdateEventGeneratorgetExternalIdentifier
AbstractOwnerIdUpdateEventGeneratorgetPaymentInformation
AbstractOwnerIdUpdateEventGeneratorgetEventMetadata
AbstractOwnerIdUpdateEventGeneratorgetEventType
AbstractOwnerIdUpdateEventGeneratorgetAggregateType
BalanceOwnerIdUpdatedEventGeneratorgenerate
BalanceOwnerIdUpdatedEventGeneratorcreateBalance
BalanceOwnerIdUpdatedEventGeneratorgetEventType
BalanceOwnerIdUpdatedEventGeneratorgetAggregateType
BalanceOwnerIdUpdatedEventPublisherpublish
BalanceOwnerIdUpdatedEventPublishertriggerEvent
ContainerOwnerIdUpdatedEventGeneratorgenerate
ContainerOwnerIdUpdatedEventGeneratorcreateContainer
ContainerOwnerIdUpdatedEventGeneratorgetEventType
ContainerOwnerIdUpdatedEventGeneratorgetAggregateType
ContainerOwnerIdUpdatedEventPublisherpublish
ContainerOwnerIdUpdatedEventPublishertriggerEvent
AbstractTotalUpdatedGeneratorgetEventMetadata
AbstractTotalUpdatedGeneratorgetEventMetadata
AbstractTotalUpdatedGeneratorgetEventType
AbstractTotalUpdatedGeneratorgetAggregateType
AbstractTotalUpdatedGeneratorgetCurrencyCode
AbstractTotalUpdatedGeneratorgetCurrencyAmount
AbstractTotalUpdatedGeneratorgetCountryCode
AbstractTotalUpdatedGeneratorgetExternalIdentifier
AbstractTotalUpdatedGeneratorgetPaymentInformation
AbstractTotalUpdatedGeneratorgetPayment
AbstractTotalUpdatedGeneratorgenerateRandomPaymentKrn
AbstractTotalUpdatedGeneratorgeneratePaymentExternalId
AbstractTotalUpdatedGeneratortoBalanceChange
AbstractTotalUpdatedGeneratortoBalanceChange
AbstractTotalUpdatedGeneratortoBalanceChange
AbstractTotalUpdatedGeneratorcreateBalanceChanges
AbstractTotalUpdatedGeneratorsettlementTransactionDetails
AbstractTotalUpdatedGeneratorgenerateWriteOffFeeContainerChange
AbstractTotalUpdatedGeneratorgenerateWriteOffFeeBalanceChange
AbstractTotalUpdatedGeneratorgenerateWriteOffInterestBalanceChange
AbstractTotalUpdatedGeneratorgenerateWriteOffInterestContainerChange
AbstractTotalUpdatedGeneratorcreateBalanceFromSimBalanceSeedFullySettled
BalanceTotalUpdatedEventPublisherpublish
BalanceTotalUpdatedEventPublishertriggerEvent
ContainerTotalUpdatedEventPublisherpublish
ContainerTotalUpdatedEventPublishertriggerEvent
DcaPaymentBalanceTotalUpdatedGeneratorgenerate
DcaPaymentBalanceTotalUpdatedGeneratorgetEventType
DcaPaymentBalanceTotalUpdatedGeneratorgetAggregateType
DcaPaymentBalanceTotalUpdatedGeneratorcreateBalance
DcaPaymentBalanceTotalUpdatedGeneratorgetBalanceChanges
DcaPaymentBalanceTotalUpdatedGeneratorprincipalToBalanceChange
DcaPaymentBalanceTotalUpdatedGeneratortoInterestSettled
DcaPaymentBalanceTotalUpdatedGeneratortoBalanceChange
DcaPaymentBalanceTotalUpdatedGeneratortoBalanceChange
DcaPaymentBalanceTotalUpdatedGeneratortoFeeSettled
DcaPaymentContainerTotalUpdatedGeneratorgenerate
DcaPaymentContainerTotalUpdatedGeneratorgetEventType
DcaPaymentContainerTotalUpdatedGeneratorgetAggregateType
DcaPaymentContainerTotalUpdatedGeneratorgetContainerChanges
DcaPaymentContainerTotalUpdatedGeneratorcreateContainer
DcaPaymentContainerTotalUpdatedGeneratorcreateBalance
DcaPaymentBalanceTotalUpdatedGeneratorTestbeforeEach
DcaPaymentBalanceTotalUpdatedGeneratorTestpaymentReference
DcaPaymentBalanceTotalUpdatedGeneratorTestgenerateContainerSeed
DcaPaymentContainerTotalUpdatedGeneratorTestbeforeEach
DcaPaymentContainerTotalUpdatedGeneratorTestpaymentReference
DcaPaymentContainerTotalUpdatedGeneratorTestgetPaymentMethodForAnySettledInUpdatedChanges
DcaPaymentContainerTotalUpdatedGeneratorTestgenerateContainerSeed
DebtItemChangesBalanceTotalUpdatedGeneratorgenerate
DebtItemChangesBalanceTotalUpdatedGeneratorgetBalanceChanges
DebtItemChangesBalanceTotalUpdatedGeneratortoBalanceChange
DebtItemChangesBalanceTotalUpdatedGeneratortoBalanceChange
DebtItemChangesBalanceTotalUpdatedGeneratortoBalanceChange
DebtItemChangesBalanceTotalUpdatedGeneratorgetEventType
DebtItemChangesBalanceTotalUpdatedGeneratorgetAggregateType
DebtItemChangesContainerTotalUpdatedGeneratorgenerate
DebtItemChangesContainerTotalUpdatedGeneratorgetContainerChanges
DebtItemChangesContainerTotalUpdatedGeneratorcontainerInterestToContainerChange
DebtItemChangesContainerTotalUpdatedGeneratorcontainerFeeToContainerChange
DebtItemChangesContainerTotalUpdatedGeneratorbalanceChangesToContainerChange
DebtItemChangesContainerTotalUpdatedGeneratorcreateBalanceTotalUpdateWithChanges
DebtItemChangesContainerTotalUpdatedGeneratorgeneratePrincipalAdjustedChange
DebtItemChangesContainerTotalUpdatedGeneratorgenerateBalanceSettledChanges
DebtItemChangesContainerTotalUpdatedGeneratorgetEventType
DebtItemChangesContainerTotalUpdatedGeneratorgetAggregateType
PartialPaymentBalanceTotalUpdatedGeneratorgenerateBalanceTotalUpdatedEvent
PartialPaymentBalanceTotalUpdatedGeneratorgenerateBalanceTotalUpdatedEvent
PartialPaymentBalanceTotalUpdatedGeneratorgenerateBalanceTotalUpdatedEvent
PartialPaymentBalanceTotalUpdatedGeneratorcreateBalanceFromSimBalanceSeed
PartialPaymentBalanceTotalUpdatedGeneratorgetBalanceChanges
PartialPaymentBalanceTotalUpdatedGeneratorgetBalanceChanges
PartialPaymentBalanceTotalUpdatedGeneratortoBalanceChange
PartialPaymentBalanceTotalUpdatedGeneratortoBalanceChange
PartialPaymentBalanceTotalUpdatedGeneratortoBalanceChange
PartialPaymentBalanceTotalUpdatedGeneratorgetEventType
PartialPaymentBalanceTotalUpdatedGeneratorgetAggregateType
PartialPaymentContainerTotalUpdatedGeneratorgenerateContainerTotalUpdatedEvent
PartialPaymentContainerTotalUpdatedGeneratorgenerateContainerTotalUpdatedEvent
PartialPaymentContainerTotalUpdatedGeneratorgenerateContainerTotalUpdatedEvent
PartialPaymentContainerTotalUpdatedGeneratorgetEventType
PartialPaymentContainerTotalUpdatedGeneratorgetAggregateType
PartialPaymentContainerTotalUpdatedGeneratorgetContainerChanges
PartialPaymentContainerTotalUpdatedGeneratorgetContainerChanges
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratortoContainerChange
PartialPaymentContainerTotalUpdatedGeneratorcreateBalanceTotalUpdatedWithChanges
PartialPaymentContainerTotalUpdatedGeneratorcreateBalanceFromSimBalanceSeed
AbstractReturningsGeneratorgetBalanceChanges
AbstractReturningsGeneratortoBalanceChange
AbstractReturningsGeneratortoBalanceChange
AbstractReturningsGeneratorcreateBalanceFromSimBalanceSeed
ReturningsBalanceTotalUpdatedGeneratorgenerate
ReturningsBalanceTotalUpdatedGeneratorgenerate
ReturningsBalanceTotalUpdatedGeneratorgetEventType
ReturningsBalanceTotalUpdatedGeneratorgetAggregateType
ReturningsBalanceTotalUpdatedGeneratorTestbeforeEach
ReturningsBalanceTotalUpdatedGeneratorTestbalance0Percent
ReturningsBalanceTotalUpdatedGeneratorTestbalance25Percent
ReturningsBalanceTotalUpdatedGeneratorTestbalance50Percent
ReturningsBalanceTotalUpdatedGeneratorTestbalance50PercentMultiple
ReturningsBalanceTotalUpdatedGeneratorTestbalance100Percent
ReturningsBalanceTotalUpdatedGeneratorTestgenerateBalanceSeed
ReturningsContainerTotalUpdatedGeneratorgenerate
ReturningsContainerTotalUpdatedGeneratornotFound
ReturningsContainerTotalUpdatedGeneratorgenerate
ReturningsContainerTotalUpdatedGeneratorgetContainerChanges
ReturningsContainerTotalUpdatedGeneratortoContainerChange
ReturningsContainerTotalUpdatedGeneratortoContainerChange
ReturningsContainerTotalUpdatedGeneratorcreateBalanceTotalUpdateWithChanges
ReturningsContainerTotalUpdatedGeneratorgenerateListPrincipalAdjusted
ReturningsContainerTotalUpdatedGeneratorgetEventType
ReturningsContainerTotalUpdatedGeneratorgetAggregateType
ReturningsContainerTotalUpdatedGeneratorTestbeforeEach
ReturningsContainerTotalUpdatedGeneratorTestcontainerSanity
ReturningsContainerTotalUpdatedGeneratorTestcontainerSanityTestWith100Percentage
ReturningsContainerTotalUpdatedGeneratorTestcontainerSanityTestWith0Percentage
ReturningsContainerTotalUpdatedGeneratorTestgenerateContainerSeed
PartialPaymentBalanceTotalUpdatedGeneratorTestbefore
PartialPaymentBalanceTotalUpdatedGeneratorTestpaymentExternalId
PartialPaymentBalanceTotalUpdatedGeneratorTestsetUpSimClaimSeed
PartialPaymentBalanceTotalUpdatedGeneratorTestextractPaymentExternalId
PartialPaymentContainerTotalUpdatedGeneratorTestbefore
PartialPaymentContainerTotalUpdatedGeneratorTesttotalAmountSanity
PartialPaymentContainerTotalUpdatedGeneratorTestpaymentExternalId
PartialPaymentContainerTotalUpdatedGeneratorTestsetUpSimClaimSeed
PartialPaymentContainerTotalUpdatedGeneratorTestextractPaymentExternalId
AcknowledgementHandlersendSubledgerAcknowledgementBooked
AcknowledgementHandlersendSubledgerAcknowledgementNotBooked
AcknowledgementHandlergenerateAcknowledgementBookedEvent
AcknowledgementHandlergenerateAcknowledgementNotBookedEvent
AssignDebtCollectionDateHandlerhandle
AssignDebtCollectionDateHandlerhandle
BalanceDunningStateUpdatedHandlerhandle
BalanceDunningStateUpdatedHandlerTestsetup
BalanceDunningStateUpdatedHandlerTestverifyContainerTriggerHandlerTest
BalanceTotalUpdatedEventGeneratorgetEventType
BalanceTotalUpdatedEventGeneratorgetAggregateType
BalanceTotalUpdatedEventGeneratorgenerateBalanceTotalUpdatedWriteOffEvent
BalanceTotalUpdatedEventGeneratorgenerateWriteOffBalanceContainerChanges
BalanceTotalUpdatedEventGeneratorcreateBalance
BookkeepingHandlersendBookkeepingEvent
BookkeepingHandlergenerateBookkeepingEvent
BookkeepingHandlerbuildProviderTransactionData
BookkeepingHandlergetAmount
BucketServiceHandlergetBucket
BulkClaimSeedHandlerhandle
BulkClaimSeedHandlerhandle
BulkClaimSeedHandlercreateSeedForDcaClient
BulkClaimSeedHandlercreateSeedForAssignmentRule
BulkClaimSeedHandlerhasAssignmentRule
BulkClaimSeedHandlergenerateClaimSeeds
BulkClaimSeedHandlergenerateStatementBundleSeed
BulkClaimSeedHandlergenerateStatementBundleSeed
BulkClaimSeedHandlercreateBundleOnBehalfOfDOS
BulkClaimSeedHandlergenerateBundleRequestBalance
BulkClaimSeedHandlergetSomeSimClaimSeeds
BulkClaimSeedHandlerrequireProduct
BulkClaimSeedHandlersendSeedEvent
BulkClaimSeedHandlergenerateOrganisationSeeds
BulkClaimSeedHandlergenerateOrganisationBalanceSeed
BulkClaimSeedHandlerrandomClaimForDcaClient
BulkClaimSeedHandlerrandomClaimForAssignmentRule
BulkClaimSeedHandlergetCountryCode
BulkClaimSeedHandlergetMerchant
BulkClaimSeedHandlergetOwner
BulkClaimSeedHandlergetProduct
BulkClaimSeedHandlerisOrganisation
BulkClaimSeedHandlerTestbefore
BulkClaimSeedHandlerTestassignmentRuleBalance
BulkClaimSeedHandlerTestassignmentRuleBalance2
BulkClaimSeedHandlerTestassignmentRuleBalance3
BulkClaimSeedHandlerTestassignmentRuleContainer
BulkClaimSeedHandlerTestverifyBulkSeedHandlerSeedsContainerProductsProperly
BulkClaimSeedHandlerTestverifyBulkSeedHandlerSeedsBalanceProductsProperly
BulkClaimSeedHandlerTestverifyBulkSeedHandlerFiltersOutDcaGroupsWithoutAssignmentRule
BulkClaimSeedHandlerTestbulkSeed_FilterByDcaId
BulkClaimSeedHandlerTestgetDca
BulkTotalUpdateHandlerhandle
BulkTotalUpdateHandlerfetchClaimByKrn
BulkTotalUpdateHandlergetNextInt
BulkTotalUpdateHandlerTestbefore
BulkTotalUpdateHandlerTestprepareCacheClaim
BulkTotalUpdateHandlerTestpartialPaymentSanity
BulkTotalUpdateHandlerTestfullReturnSanity
BulkTotalUpdateHandlerTestverifyAllHandledClaimComesFromCache
ChangeOwnerHandlerhandleChangeOwner
CommunicationsHistoryHandlergetSendouts
CommunicationsHistoryHandlerretrieveSendout
CommunicationsHistoryHandlergetFile
ContainerDunningStateUpdateHandlerhandle
ContainerDunningStateUpdateHandlerTestsetup
ContainerDunningStateUpdateHandlerTestverifyContainerTriggerHandlerTest
ContainerTotalUpdatedEventGeneratorgetEventType
ContainerTotalUpdatedEventGeneratorgetAggregateType
ContainerTotalUpdatedEventGeneratorgenerateWriteOffEvent
ContainerTotalUpdatedEventGeneratorgenerateWriteOffContainerChanges
ContainerTotalUpdatedEventGeneratorgenerateWriteOffBalanceContainerChanges
ContainerTotalUpdatedEventGeneratorcreateBalance
DebtItemChangeHandlerhandle
DebtItemChangeHandleremitChanges
FullReturnHandleremitFullReturn
FullReturnHandleremitFullReturn
FullReturnHandleremitFullReturn
FullReturnHandleremitFullReturn
FullReturnHandlerzeroOutstanding
FullReturnHandlerTestbefore
FullReturnHandlerTestcontainerSanity
FullReturnHandlerTestbalanceSanity
FullReturnHandlerTestsetUpSalWithContainer
FullReturnHandlerTestsetUpSalWithBalance
GetClaimHandlerhandle
GetClaimHandlerhandle
GetClaimHandlergetClaimV2
GetClaimHandlertoSimDebtItem
GetClaimHandlertoSimPurchase
GetClaimHandlertoSimSendout
GetClaimHandlertoSimLineItem
GetClaimHandlertoSimPurchaseAddress
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPaymentForBundle
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPayment
PartialPaymentHandleremitPartialPayment
PartialReturnHandleremitPartialReturn
PartialReturnHandleremitPartialReturn
PartialReturnHandlerpublishBalanceEvents
PartialReturnHandlerpublishContainerEvents
PartialReturnHandlergetContainerBalances
PartialReturnHandlergetBalances
PartialReturnHandlersetOriginalAmount
PartialReturnHandlerzeroOutstanding
PartialReturnHandlerTestbefore
PartialReturnHandlerTestcontainerSanity
PartialReturnHandlerTestbalanceSanity
PartialReturnHandlerTestsetUpSalWithContainer
PartialReturnHandlerTestsetUpSalWithBalance
PlaceClaimHandlerhandlePlaceClaim
PlaceClaimHandlerTestbefore
PlaceClaimHandlerTestsanity
RecallClaimHandlerhandleRecall
RecallClaimHandlerconfirmClaimRecall
RecallClaimHandlerconfirmClaimRecall
StatementBundleEvaluatorshouldCreateStatementBundle
StopOutsourcingByCreditorHandlerhandle
StopOutsourcingByCreditorHandlerextracted
StopOutsourcingByCreditorHandlerTestbefore
StopOutsourcingByCreditorHandlerTestautomaticStopOutsourcingByDcaSanity
StopOutsourcingByCreditorHandlerTestnoneAutomaticStopOutsourcingByDcaSanity
StopOutsourcingByDcaHandlerhandle
StopOutsourcingByDcaHandlerhandleCreditorInitiatedStopOutsourcing
StopOutsourcingByDcaHandlerzeroContainer
StopOutsourcingByDcaHandlerTestbefore
StopOutsourcingByDcaHandlerTestsanity
StopOutsourcingReversedByDcaHandlerhandle
BatchPaymentApproveHandlerhandle
BatchPaymentHandlerstartBatchPaymentForDcaClient
BatchPaymentHandlerstopBatchPayment
BatchPaymentHandlerapproveBatchPayment
BatchPaymentHandlersendMatchingBankAccountStatement
BatchPaymentHandlersendNonMatchingBankAccountStatement
BatchPaymentHandlerannouncePayment
BatchPaymentHandlerstorePaymentAnnouncementInSim
BatchPaymentHandlerreverseAnnouncePayment
BatchPaymentHandlerrunBatchPaymentsForAllDcaClients
BatchPaymentHandlermakeStartBatchPaymentCall
BatchPaymentHandlermakeStopBatchPaymentCall
BatchPaymentHandlermakeApproveBatchPaymentCall
BatchPaymentHandlertoSimPaymentAnnouncementV2
BatchPaymentHandlerwithValidVersion
BatchPaymentHandlerwithValidVersion
BatchPaymentHandlercheckVersion
BatchPaymentPublishedEventHandlerhandle
BatchPaymentPublishedEventHandlerisContainer
BatchPaymentPublishedEventHandlergetSimSeed
BatchPaymentStoppedEventHandlerhandle
AddressGeneratorgetRandomAddress
ClaimEnrichedHandlerhandle
ClaimSeedGeneratorgenerateContainerSeed
ClaimSeedGeneratorgenerateBalanceSeed
ClaimSeedGeneratorgenerateBalanceSeed
ClaimSeedGeneratorgenerateBalanceSeed
ClaimSeedGeneratoraddSimCommunicationsHistorySeed
ClaimSeedGeneratorbalanceToOsisSeed
ClaimSeedGeneratorsetupFixedSumCredit
ClaimSeedGeneratorbalanceToOsisSeed
ClaimSeedGeneratorisOrganisationToOsis
DecisionStoreEnrichmentHandlergetDecisionStoreResponse
DecisionStoreEnrichmentHandlercreatePolicyRequest
KlarnaCardGatewayHandlerhandle
KlarnaCardGatewayHandlerreadFile
KlarnaCardGatewayHandlerreadTemplateFromInputStream
KlarnaCardGatewayHandlerreplaceTemplateVariables
KlarnaCardGatewayHandlerreplaceVariable
KlarnaCardGatewayHandlerTesthandle_personaWithCard_sanityTest
OsisEnrichmentHandlergetOsisPayload
OsisEnrichmentHandlergetPayloadTemplate
OsisEnrichmentHandlerreplaceTemplateVariables
OsisEnrichmentHandlerfillVariables
OsisEnrichmentHandlerfillNullValues
OsisEnrichmentHandlerfillPersonaKrn
OsisEnrichmentHandlergetFormattedValue
OsisEnrichmentHandlerreadFile
OsisEnrichmentHandlerreplaceVariable
OsisEnrichmentHandlerTestnullValuesShouldBePopulated
OsisEnrichmentHandlerTestgivenValuesShouldBePopulated
PersonaEnrichmentHandlergetPersonaPayload
PersonaEnrichmentHandlergetPayloadTemplate
PersonaEnrichmentHandlerreplaceTemplateVariables
PersonaEnrichmentHandlerfillVariables
PersonaEnrichmentHandlergetFormattedValue
PersonaEnrichmentHandlerapplyNullValues
PersonaEnrichmentHandlerfillPersonaKrn
PersonaEnrichmentHandlerreplaceVariable
PersonaEnrichmentHandlerreadFile
PersonaEnrichmentHandlerTestdefaultTemplate_shouldSetPersonaKrnFromPersonaId
SalEnrichmentHandlerV1getContainer
SalEnrichmentHandlerV1getContainerBalances
SalEnrichmentHandlerV1getContainerInterests
SalEnrichmentHandlerV1getInterestsForContainerParent
SalEnrichmentHandlerV1createInterestFromSimInterest
SalEnrichmentHandlerV1getFeesForResource
SalEnrichmentHandlerV1getCurrencyCode
SalEnrichmentHandlerV1createFeeFromSimFee
SalEnrichmentHandlerV1createBalanceFromSimBalance
SalEnrichmentHandlerV1formatInstant
SalEnrichmentHandlerV1getCurrencyCodeFromAggregateKrn
SalEnrichmentHandlerV1getCurrencyCodeFromCountryCode
SalEnrichmentHandlerV1changeOwnerOfAggregateKrn
SalEnrichmentHandlerV1setDunningState
SalEnrichmentHandlerV1writeOffContainer
SalEnrichmentHandlerV1writeOffBalance
SalEnrichmentHandlerV1Testsetup
SalEnrichmentHandlerV1TestgetContainerInterestsShouldReturnTheCorrectAmountOfInterests
SalEnrichmentHandlerV1TestchangeOwnerIdOfContainerIdSanity
SalEnrichmentHandlerV1TestchangeOwnerIdOfBalanceIdSanity
SalEnrichmentHandlerV1TestsetContainerDunningStateSanity
SalEnrichmentHandlerV1TestsetBalanceDunningStateSanity
SalEnrichmentHandlerV2getBalance
SalEnrichmentHandlerV2getBalanceResponseBodyFromContainer
SalEnrichmentHandlerV2findSeedByNoneStandaloneBalanceId
SalEnrichmentHandlerV2createBalanceFromSimBalance
SalEnrichmentHandlerV2getInterestSummary
SalEnrichmentHandlerV2moneyAdditionOperator
SalEnrichmentHandlerV2toInterestDetail
SalEnrichmentHandlerV2getMoney
SalEnrichmentHandlerV2formatInstant
SalEnrichmentHandlerV2getCurrencyCodeFromAggregateKrn
SalEnrichmentHandlerV2getCurrencyCodeFromCountryCode
ServiceClaimRemainingAmountHelpergetClaimRemainingAmount
ServiceClaimRemainingAmountHelperTestbefore
ServiceClaimRemainingAmountHelperTestsanity
ServiceClaimRemainingAmountHelperTestnoPrincipalShouldNotThrowException
SimBatchPaymentstorePaymentAnnouncement
SimBatchPaymentgetPaymentAnnouncement
SimBatchPaymentgetAnnouncedButNotReversedAmount
SimBatchPaymentTestannouncedAmount
SimBatchPaymentTestreversePaymentAnnouncementAndVerifyAmount
SimBatchPaymentTestgenerateDcaReference
SimClaimplace
SimClaimstoreStopOutsourcingByCreditor
SimClaimstoreStopOutsourcingByDca
SimClaimstoreDebtItemChange
SimClaimstorePaymentAnnouncement
SimClaimstoreDebtItem
SimClaimstoreSendout
SimClaimgetUnpaidAmount
SimClaimgetDebtItemChangeAmount
SimClaimTestoriginalAndRemainingAmounts
SimClaimTestunpaidAmountSettlement
SimClaimTestunpaidAmountReversedPaymentAnnouncement
SimClaimTestunpaidAmountAfterChanges
SimClaimTestminimalSimClaim
SimCustomerIdentifiersetIdentifierType
SimDcaaddSimDcaClient
SimDcagetSimDcaClient
SimDcaclients
SimDcahasEndpoint
SimDcagetSimDcaClients
SimDcaClientKeygetCombinedKey
SimDcaClientKeyTestequals
SimDcaEndpointsetDcaRegistrationVersion
SimDcaGroupsetHttpStatus
SimDcaGroupaddSimDca
SimDcaGroupgetSimDca
SimDcaGroupgetSimDcas
SimDomicilecountryCode
SimDomicilecurrencyCode
SimDomiciledistributedNin
SimDomicilefromCountryCode
SimPaymentAnnouncementreverse
OsisTemplatesfromName
SimBalanceSeedgetAmount
SimClaimSeedgetAggregateKrn
SimClaimSeedgetType
SimCommunicationsHistorySeedtoCommunication
SimContainerSeedgetTotalAmount
SimUtilsgenerateRandomInt
AbstractRefDataCacheSeedersetCache
AbstractRefDataCacheSeedersetDependencyCache
AbstractRefDataCacheSeederseedCache
AbstractRefDataCacheSeedergetSimDcaGroups
AbstractRefDataCacheSeedergetProductIds
AbstractRefDataCacheSeederseedProducts
AbstractRefDataCacheSeederseedDcaGroups
AbstractRefDataCacheSeederseedNonCapitalizables
AbstractRefDataCacheSeederseedBankAccounts
EndpointGeneratorcreatedEndpoint
EndpointGeneratorcreateHeaders
RefDataManagerseedAndLoad
RefDataManagerTestbeforeEach
RefDataManagerTestsystemTest
RefDataManagerTesttestDcaEU
RefDataManagerTesttestDcaUS
RefDataManagerTestsystemTestAndDcaIntegration
SimRefDataLoaderloadRefData
SimRefDataLoaderloadProducts
SimRefDataLoaderloadDcaGroups
SimRefDataLoaderloadDcas
SimRefDataLoaderloadDcaClients
SimRefDataLoaderloadDcaEndpoints
SimRefDataLoaderloadClaimAssignmentRules
SimRefDataLoaderloadNonCapitalisables
SimRefDataLoaderloadBankAccounts
SimRefDataLoadertoApi
SimRefDataLoadertoApi
SimRefDataLoadertoApiRef
SimRefDataLoadertoApi
SimRefDataLoadertoApiRef
SimRefDataLoadertoApi
SimRefDataLoadertoApiV2
SystemTestRefDataCacheSeedergetProductIds
SystemTestRefDataCacheSeedergetSimDcaGroups
SystemTestRefDataCacheSeederTestbeforeEach
SystemTestRefDataCacheSeederTestsetUpSanity
TestDcaRefDataCacheSeederEUgetProductIds
TestDcaRefDataCacheSeederEUgetSimDcaGroups
TestDcaRefDataCacheSeederEUgetDcas
TestDcaRefDataCacheSeederEUdcaClientName
TestDcaRefDataCacheSeederEUgetClients
TestDcaRefDataCacheSeederUSgetProductIds
TestDcaRefDataCacheSeederUSgetSimDcaGroups
TestDcaRefDataCacheSeederUSgetTrueAccordDca
TestDcaRefDataCacheSeederUSgetTrueAccordDcaClients
AssignDebtCollectionDateTriggergetDelay
AssignDebtCollectionDateTriggerrun
BatchPaymentApproveTriggergetDelay
BatchPaymentApproveTriggerrun
CreditorInitiatedStopOutsourcingTriggergetDelay
CreditorInitiatedStopOutsourcingTriggerrun
GetClaimTriggergetDelay
GetClaimTriggerrun
RecallClaimTriggergetDelay
RecallClaimTriggerrun
TriggerDetailsServicegetDelay
TriggerSchedulerpostConstruct
TriggerSchedulerschedule
TriggersConfigurationsetTriggers
TriggerConfigurationsetDelay
[]
package com.klarna.dcpipe.simulator.handler.enrichment;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static java.util.UUID.randomUUID;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import com.jayway.jsonpath.JsonPath;
import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.model.seed.SimClaimSeed;
import com.klarna.dcpipe.simulator.model.seed.SimOsisSeed;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class OsisEnrichmentHandlerTest {
    @Mock SimSeedCache cache;

    @InjectMocks OsisEnrichmentHandler handler;

    @Test
    void nullValuesShouldBePopulated() {
        var seed = new SimClaimSeed();
        var osisSeed = new SimOsisSeed();

        osisSeed.externalId("krn");
        osisSeed.personaKrn("persona:123");
        osisSeed.variables(Map.of("purchaseTokenId", "@@null@@"));

        seed.osis(List.of(osisSeed));

given(cache.getSeedByAnyRef(any())).willReturn(seed);
        String payload = handler.getOsisPayload("krn");

        String value =
                JsonPath.read(payload, "$.data.transactions[0].traits.isCapturing.purchaseTokenId");
        assertThat(value).isNull();
    }

    @Test
    void givenValuesShouldBePopulated() {
        var seed = new SimClaimSeed();
        var osisSeed = new SimOsisSeed();

        osisSeed.externalId("krn");
        osisSeed.personaKrn("persona:123");
        var tokenId = randomUUID().toString();
        osisSeed.variables(Map.of("purchaseTokenId", tokenId));

        seed.osis(List.of(osisSeed));

given(cache.getSeedByAnyRef(any())).willReturn(seed);
        String payload = handler.getOsisPayload("krn");

        String value =
                JsonPath.read(payload, "$.data.transactions[0].traits.isCapturing.purchaseTokenId");
        assertThat(value).isEqualTo(tokenId);
    }
}
package com.klarna.dcpipe.simulator.events.sal.totalupdated.settlement;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.allocation.BalanceAllocation;
import com.klarna.dcpipe.simulator.allocation.BalanceSettlementAllocationService;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.partialpayment.PartialPaymentBalanceTotalUpdatedGenerator;
import com.klarna.dcpipe.simulator.model.seed.SimBalanceSeed;
import com.klarna.dcpipe.simulator.model.seed.SimClaimSeed;
import com.klarna.dcpipe.simulator.model.seed.SimFeeSeed;
import com.klarna.dcpipe.simulator.model.seed.SimInterestSeed;
import com.klarna.dcpipe.simulator.model.seed.SimPrincipalSeed;
import com.klarna.dcpipe.simulator.model.seed.SimSalSeed;
import com.klarna.servicing.sal.cb.balance.change.BalanceChange;
import com.klarna.servicing.sal.cb.currency.CurrencyAmount;
import com.klarna.servicing.sal.cb.event.BalanceTotalUpdatedEvent;
import java.util.Arrays;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class PartialPaymentBalanceTotalUpdatedGeneratorTest {

    @Mock BalanceSettlementAllocationService balanceSettlementAllocationService;

    private PartialPaymentBalanceTotalUpdatedGenerator generator;

    @BeforeEach
    void before() {
        generator =
                new PartialPaymentBalanceTotalUpdatedGenerator(balanceSettlementAllocationService);
    }

    @Test
    void paymentExternalId() {
given(balanceSettlementAllocationService.balanceSettlementAllocation(any(SimBalanceSeed.class), anyLong())).willReturn(new BalanceAllocation().feeAllocationAmount(0L).interestAllocationAmount(0L).principleAllocationAmount(100L));
        SimClaimSeed simClaimSeed = setUpSimClaimSeed();
        BalanceTotalUpdatedEvent event =
                generator.generateBalanceTotalUpdatedEvent(
                        simClaimSeed.sal().balance(), simClaimSeed, 100L);
        String pei = extractPaymentExternalId(event);
        Long settlementAmount =
                event.getChanges().stream()
                                .map(BalanceChange::getChangeAmount)
                                .map(CurrencyAmount::getAmount)
                                .reduce(0L, Long::sum)
                        * -1;
        assertThat(pei).startsWith("PEI");
        assertThat(settlementAmount).isEqualTo(100L);
    }

    private SimClaimSeed setUpSimClaimSeed() {
        var seed = new SimClaimSeed();
        seed.domicileCountryCode("SE");
        var sal = new SimSalSeed();
        sal.productId("monthly");
        var balance = new SimBalanceSeed();
        var principal = new SimPrincipalSeed();
        var interest = new SimInterestSeed();
        var fee = new SimFeeSeed();
        balance.principal(principal);
        balance.interests(Arrays.asList(interest));
        balance.fees(Arrays.asList(fee));
        sal.balance(balance);
        seed.sal(sal);
        return seed;
    }

    /** The assumption is that all changes are related to the same payment. */
    private String extractPaymentExternalId(BalanceTotalUpdatedEvent event) {
        for (BalanceChange change : event.getChanges()) {
            switch (change.getChangeType()) {
                case PRINCIPAL_SETTLED:
                    return change.getPrincipalSettled().getPayment().getPaymentExternalId();
                case FEE_SETTLED:
                    return change.getFeeSettled().getPayment().getPaymentExternalId();
                case INTEREST_SETTLED:
                    return change.getInterestSettled().getPayment().getPaymentExternalId();
            }
        }
        return null;
    }
}
package com.klarna.dcpipe.simulator.handler;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.cache.SimClaimCache;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.BalanceTotalUpdatedEventPublisher;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.ContainerTotalUpdatedEventPublisher;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsBalanceTotalUpdatedGenerator;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsContainerTotalUpdatedGenerator;
import com.klarna.dcpipe.simulator.model.SimClaim;
import com.klarna.dcpipe.simulator.model.seed.SimBalanceSeed;
import com.klarna.dcpipe.simulator.model.seed.SimClaimSeed;
import com.klarna.dcpipe.simulator.model.seed.SimContainerSeed;
import com.klarna.dcpipe.simulator.model.seed.SimFeeSeed;
import com.klarna.dcpipe.simulator.model.seed.SimInterestSeed;
import com.klarna.dcpipe.simulator.model.seed.SimSalSeed;
import com.klarna.servicing.sal.cb.event.BalanceTotalUpdatedEvent;
import java.util.Arrays;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class PartialReturnHandlerTest {

    private PartialReturnHandler handler;

    @Mock SimClaimCache simClaimCache;

    @Mock SimSeedCache simSeedCache;

    @Mock ContainerTotalUpdatedEventPublisher containerTotalUpdatedEventPublisher;

    @Mock BalanceTotalUpdatedEventPublisher balanceTotalUpdatedEventPublisher;

    @Mock ReturningsContainerTotalUpdatedGenerator containerTotalUpdatedEventGenerator;

    @Mock ReturningsBalanceTotalUpdatedGenerator balanceTotalUpdatedEventGenerator;

    @BeforeEach
    void before() {
        handler =
                new PartialReturnHandler(
                        simClaimCache,
                        simSeedCache,
                        containerTotalUpdatedEventPublisher,
                        balanceTotalUpdatedEventPublisher,
                        containerTotalUpdatedEventGenerator,
                        balanceTotalUpdatedEventGenerator);
    }

    @Test
    void containerSanity() {
        setUpSalWithContainer();
        var percentage = 50;
given(balanceTotalUpdatedEventGenerator.generate(any(), any(), any(), eq(2))).willReturn(Arrays.asList(new BalanceTotalUpdatedEvent(), new BalanceTotalUpdatedEvent()));
        handler.emitPartialReturn("anyClaim", percentage, 2);
then(containerTotalUpdatedEventGenerator).should().generate("anyClaim",percentage);
then(balanceTotalUpdatedEventGenerator).should().generate(any(),any(),eq(percentage),eq(2));
then(containerTotalUpdatedEventPublisher).should().triggerEvent(any());
then(balanceTotalUpdatedEventPublisher).should(times(2)).triggerEvent(any());
then(simSeedCache).should(times(1)).storeSeed(any());
    }

    @Test
    void balanceSanity() {
        ArgumentCaptor<BalanceTotalUpdatedEvent> arg =
                ArgumentCaptor.forClass(BalanceTotalUpdatedEvent.class);
        setUpSalWithBalance();
        var percentage = 0;
given(balanceTotalUpdatedEventGenerator.generate(any(), any(), any(), eq(2))).willReturn(Arrays.asList(new BalanceTotalUpdatedEvent(), new BalanceTotalUpdatedEvent()));
        handler.emitPartialReturn("anyClaim", percentage, 2);
then(balanceTotalUpdatedEventGenerator).should().generate(any(),any(),eq(percentage),eq(2));
then(balanceTotalUpdatedEventPublisher).should(times(2)).triggerEvent(arg.capture());
then(simSeedCache).should(times(1)).storeSeed(any());
    }

    private SimBalanceSeed setUpSalWithContainer() {
        var seed = new SimClaimSeed();
        var sal = new SimSalSeed();
        var container = new SimContainerSeed();
        var interest = new SimInterestSeed();
        var fee = new SimFeeSeed();
        var balance = new SimBalanceSeed();
        container.interests(Arrays.asList(interest));
        container.fees(Arrays.asList(fee));
        container.balances(Arrays.asList(balance));
        sal.container(container);
        seed.sal(sal);
        seed.domicileCountryCode("SE");
        seed.sal().productId("monthly");
        when(simClaimCache.getClaimById(any()))
                .thenReturn(
                        Optional.of(
                                new SimClaim()
                                        .aggregateKrn("any")
                                        .domicileCountryCode("SE")
                                        .productId("Monthly")));
        when(simSeedCache.getSeedByAnyRef(any())).thenReturn(seed);
        return balance;
    }

    private SimBalanceSeed setUpSalWithBalance() {
        var seed = new SimClaimSeed();
        var sal = new SimSalSeed();
        var interest = new SimInterestSeed();
        var fee = new SimFeeSeed();
        var balance = new SimBalanceSeed();
        balance.interests(Arrays.asList(interest));
        balance.fees(Arrays.asList(fee));
        sal.balance(balance);
        seed.sal(sal);
        seed.domicileCountryCode("SE");
        seed.sal().productId("monthly");
        when(simClaimCache.getClaimById(any()))
                .thenReturn(
                        Optional.of(
                                new SimClaim()
                                        .aggregateKrn("any")
                                        .domicileCountryCode("SE")
                                        .productId("Monthly")));
        when(simSeedCache.getSeedByAnyRef(any())).thenReturn(seed);
        return balance;
    }
}
package com.klarna.dcpipe.simulator.handler;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.cache.SimClaimCache;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.BalanceTotalUpdatedEventPublisher;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.ContainerTotalUpdatedEventPublisher;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsBalanceTotalUpdatedGenerator;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsContainerTotalUpdatedGenerator;
import com.klarna.dcpipe.simulator.model.SimClaim;
import com.klarna.dcpipe.simulator.model.seed.SimBalanceSeed;
import com.klarna.dcpipe.simulator.model.seed.SimClaimSeed;
import com.klarna.dcpipe.simulator.model.seed.SimContainerSeed;
import com.klarna.dcpipe.simulator.model.seed.SimFeeSeed;
import com.klarna.dcpipe.simulator.model.seed.SimInterestSeed;
import com.klarna.dcpipe.simulator.model.seed.SimSalSeed;
import com.klarna.servicing.sal.cb.event.BalanceTotalUpdatedEvent;
import java.util.Arrays;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class FullReturnHandlerTest {

    private FullReturnHandler handler;

    @Mock SimClaimCache simClaimCache;

    @Mock SimSeedCache simSeedCache;

    @Mock ContainerTotalUpdatedEventPublisher containerTotalUpdatedEventPublisher;

    @Mock BalanceTotalUpdatedEventPublisher balanceTotalUpdatedEventPublisher;

    @Mock ReturningsContainerTotalUpdatedGenerator containerTotalUpdatedEventGenerator;

    @Mock ReturningsBalanceTotalUpdatedGenerator balanceTotalUpdatedEventGenerator;

    @BeforeEach
    void before() {
        handler =
                new FullReturnHandler(
                        simClaimCache,
                        simSeedCache,
                        containerTotalUpdatedEventPublisher,
                        balanceTotalUpdatedEventPublisher,
                        containerTotalUpdatedEventGenerator,
                        balanceTotalUpdatedEventGenerator);
    }

    @Test
    void containerSanity() {
        setUpSalWithContainer();
        var percentage = 100;
        handler.emitFullReturn("anyClaim");
then(containerTotalUpdatedEventGenerator).should().generate("anyClaim",percentage);
then(balanceTotalUpdatedEventGenerator).should().generate(any(),any(),eq(percentage));
then(containerTotalUpdatedEventPublisher).should().triggerEvent(any());
then(balanceTotalUpdatedEventPublisher).should().triggerEvent(any());
then(simSeedCache).should().storeSeed(any());
    }

    @Test
    void balanceSanity() {
        ArgumentCaptor<BalanceTotalUpdatedEvent> arg =
                ArgumentCaptor.forClass(BalanceTotalUpdatedEvent.class);
        setUpSalWithBalance();
        var percentage = 100;
        handler.emitFullReturn("anyClaim");
then(balanceTotalUpdatedEventGenerator).should().generate(any(),any(),eq(percentage));
then(balanceTotalUpdatedEventPublisher).should().triggerEvent(arg.capture());
then(simSeedCache).should().storeSeed(any());
    }

    private SimBalanceSeed setUpSalWithContainer() {
        var seed = new SimClaimSeed();
        var sal = new SimSalSeed();
        var container = new SimContainerSeed();
        var interest = new SimInterestSeed();
        var fee = new SimFeeSeed();
        var balance = new SimBalanceSeed();
        container.interests(Arrays.asList(interest));
        container.fees(Arrays.asList(fee));
        container.balances(Arrays.asList(balance));
        sal.container(container);
        seed.sal(sal);
        seed.domicileCountryCode("SE");
        seed.sal().productId("monthly");
        when(simClaimCache.getClaimById(any()))
                .thenReturn(
                        Optional.of(
                                new SimClaim()
                                        .aggregateKrn("any")
                                        .domicileCountryCode("SE")
                                        .productId("Monthly")));
        when(simSeedCache.getSeedByAnyRef(any())).thenReturn(seed);
        return balance;
    }

    private SimBalanceSeed setUpSalWithBalance() {
        var seed = new SimClaimSeed();
        var sal = new SimSalSeed();
        var interest = new SimInterestSeed();
        var fee = new SimFeeSeed();
        var balance = new SimBalanceSeed();
        balance.interests(Arrays.asList(interest));
        balance.fees(Arrays.asList(fee));
        sal.balance(balance);
        seed.sal(sal);
        seed.domicileCountryCode("SE");
        seed.sal().productId("monthly");
        when(simClaimCache.getClaimById(any()))
                .thenReturn(
                        Optional.of(
                                new SimClaim()
                                        .aggregateKrn("any")
                                        .domicileCountryCode("SE")
                                        .productId("Monthly")));
        when(simSeedCache.getSeedByAnyRef(any())).thenReturn(seed);
        return balance;
    }
}
package com.klarna.dcpipe.simulator.handler;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.events.sal.dunningstate.ContainerDunningStateUpdatedEventPublisher;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class ContainerDunningStateUpdateHandlerTest {

    private ContainerDunningStateUpdateHandler containerDunningStateUpdateHandler;

    @Mock SimSeedCache simSeedCache;

    @Mock ContainerDunningStateUpdatedEventPublisher containerDunningStateUpdatedEventPublisher;

    @BeforeEach
    void setup() {
        containerDunningStateUpdateHandler =
                new ContainerDunningStateUpdateHandler(
                        simSeedCache, containerDunningStateUpdatedEventPublisher);
    }

    @Test
    void verifyContainerTriggerHandlerTest() {
        containerDunningStateUpdateHandler.handle("sal_reference", 1);
then(simSeedCache).should().getSeedByAnyRef(any());
then(containerDunningStateUpdatedEventPublisher).should().triggerEvent(any(),eq(1));
    }
}
package com.klarna.dcpipe.simulator.events.sal.dunningstate;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static com.klarna.dcpipe.simulator.TestContext.createSimClaimSeed;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dc_cross_cutting.kafka.KafkaPublisher;
import com.klarna.dcpipe.simulator.cache.SimRefDataCache;
import com.klarna.servicing.sal.cb.event.BalanceDunningStateUpdatedEvent;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class BalanceDunningStateUpdatedEventPublisherTest {

    @Mock KafkaPublisher<String, BalanceDunningStateUpdatedEvent> kafkaPublisher;
    private BalanceDunningStateUpdatedEventPublisher balanceDunningStateUpdatedEventPublisher;

    @BeforeEach
    void setup() {
        SimRefDataCache refDataCache = new SimRefDataCache();
        BalanceDunningStateUpdatedEventGenerator generator =
                new BalanceDunningStateUpdatedEventGenerator(refDataCache);
        balanceDunningStateUpdatedEventPublisher =
                new BalanceDunningStateUpdatedEventPublisher(generator, kafkaPublisher);
    }

    @Test
    void triggerBalanceDunningStateUpdatedEventTest() {
        var simSeed = createSimClaimSeed();
        balanceDunningStateUpdatedEventPublisher.triggerEvent(simSeed, 1);
then(kafkaPublisher).should().send(any(),any(),any());
    }
}
package com.klarna.dcpipe.simulator.handler;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.events.sal.dunningstate.BalanceDunningStateUpdatedEventPublisher;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class BalanceDunningStateUpdatedHandlerTest {

    private BalanceDunningStateUpdatedHandler balanceDunningStateUpdatedHandler;

    @Mock SimSeedCache simSeedCache;

    @Mock BalanceDunningStateUpdatedEventPublisher balanceDunningStateUpdatedEventPublisher;

    @BeforeEach
    void setup() {
        balanceDunningStateUpdatedHandler =
                new BalanceDunningStateUpdatedHandler(
                        simSeedCache, balanceDunningStateUpdatedEventPublisher);
    }

    @Test
    void verifyContainerTriggerHandlerTest() {
        balanceDunningStateUpdatedHandler.handle("sal_reference", 1);
then(simSeedCache).should().getSeedByAnyRef(any());
then(balanceDunningStateUpdatedEventPublisher).should().triggerEvent(any(),eq(1));
    }
}
package com.klarna.dcpipe.simulator.api.klarnacardgateway;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.mockito.Mockito.verify;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.handler.enrichment.KlarnaCardGatewayHandler;
import java.util.Map;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class KlarnaCardGatewayMockEndpointTest {

    @InjectMocks KlarnaCardGatewayMockEndpoint klarnaCardGatewayMockEndpoint;
    @Mock KlarnaCardGatewayHandler klarnaCardGatewayHandler;

    @Test
    void getPersonaResult_externalReferenceId_sanityTest() {
        var personaId = "8af9349b-f5f4-4fbf-87bf-583cbd185426";
        var variables =
                Map.of(
                        KlarnaCardGatewayMockEndpoint.KEY_VARIABLES_EXTERNAL_REFERENCE_ID,
                        personaId);
        var payload =
                Map.<String, Object>of(
                        KlarnaCardGatewayMockEndpoint.KEY_PAYLOAD_VARIABLES, variables);

        klarnaCardGatewayMockEndpoint.getPersonaResult(payload);

then(klarnaCardGatewayHandler).should().handle(personaId);
    }

    @Test
    void getPersonaResult_externalReferenceKrn_sanityTest() {
        var personaId = "5fb27673-241b-4427-ac9e-b350a3b4559b";
        var personaKrn = String.format("krn:madeup:%s", personaId);
        var variables =
                Map.of(
                        KlarnaCardGatewayMockEndpoint.KEY_VARIABLES_EXTERNAL_REFERENCE_KRN,
                        personaKrn);
        var payload =
                Map.<String, Object>of(
                        KlarnaCardGatewayMockEndpoint.KEY_PAYLOAD_VARIABLES, variables);

        klarnaCardGatewayMockEndpoint.getPersonaResult(payload);

then(klarnaCardGatewayHandler).should().handle(personaId);
    }
}
package com.klarna.dcpipe.simulator.handler.enrichment;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.model.SimCustomerIdentifier;
import com.klarna.dcpipe.simulator.model.SimCustomerIdentifierType;
import com.klarna.dcpipe.simulator.model.seed.SimClaimSeed;
import com.klarna.dcpipe.simulator.model.seed.SimPersonaSeed;
import java.util.UUID;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class PersonaEnrichmentHandlerTest {

    @Mock private SimSeedCache simSeedCache;

    @InjectMocks private PersonaEnrichmentHandler handler;

    @Test
    void defaultTemplate_shouldSetPersonaKrnFromPersonaId() {
        var personaId = new UUID(0L, 1L).toString();
        var personaSeed =
                new SimPersonaSeed()
                        .personaId(personaId)
                        .template("DEFAULT_TEMPLATE")
                        .customerIdentifier(
                                new SimCustomerIdentifier(SimCustomerIdentifierType.PERSONA));

given(simSeedCache.getSeedByAnyRefOrBackFill(anyString(), anyString())).willReturn(new SimClaimSeed().persona(personaSeed));

        var payload = handler.getPersonaPayload(personaId);

        assertThat(payload)
                .contains(
                        "\"krn\": \"krn:user-account-eu:persona:00000000-0000-0000-0000-000000000001\"");
    }
}
package com.klarna.dcpipe.simulator.api;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static com.klarna.dcpipe.simulator.model.SimDependency.DependencyName.PERSONA;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.cache.SimDependencyCache;
import com.klarna.dcpipe.simulator.cache.SimRefDataCache;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.web.server.ResponseStatusException;

@VerifyNoMoreInteractions
class ResponseCodeProvokerTest {

    private ResponseCodeProvoker provoker;

    @Mock SimRefDataCache cache;

    @Mock SimDependencyCache dependencyCache;

    @BeforeEach
    void beforeEach() {
        provoker = new ResponseCodeProvoker(cache, dependencyCache);
    }

    @Test
    void dcaGroupOk() {
given(cache.getDcaGroupHttpStatus("theGroup")).willReturn(OK);
        provoker.verify("theGroup");
    }

    @Test
    void dcaGroupBadRequest() {
given(cache.getDcaGroupHttpStatus("theGroup")).willReturn(BAD_REQUEST);
        assertThatThrownBy(
                        () -> {
                            provoker.verify("theGroup");
                        })
                .isExactlyInstanceOf(ResponseStatusException.class);
    }

    @Test
    void dependencyOk() {
given(dependencyCache.getDependencyHttpStatus(PERSONA)).willReturn(OK);
        provoker.verify(PERSONA);
    }

    @Test
    void dependencyBadRequest() {
given(dependencyCache.getDependencyHttpStatus(PERSONA)).willReturn(BAD_REQUEST);
        assertThatThrownBy(
                        () -> {
                            provoker.verify(PERSONA);
                        })
                .isExactlyInstanceOf(ResponseStatusException.class);
    }
}
package com.klarna.dcpipe.simulator.handler;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static com.klarna.dc_cross_cutting.util.KrnUtils.KrnEntitiesEnum.CLAIM;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dc_cross_cutting.util.KrnUtils;
import com.klarna.dcpipe.api.internal.dto.Claim;
import com.klarna.dcpipe.api.internal.dto.ClaimState;
import com.klarna.dcpipe.api.internal.dto.Debt;
import com.klarna.dcpipe.api.internal.dto.Fee;
import com.klarna.dcpipe.api.internal.dto.Interest;
import com.klarna.dcpipe.api.internal.dto.PaymentAnnouncement;
import com.klarna.dcpipe.api.internal.dto.Principal;
import com.klarna.dcpipe.client.dcpipe.internal.DcPipeInternalService;
import com.klarna.dcpipe.simulator.cache.SimClaimCache;
import com.klarna.dcpipe.simulator.helper.ServiceClaimRemainingAmountHelper;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;

@VerifyNoMoreInteractions
class BulkTotalUpdateHandlerTest {

    private BulkTotalUpdateHandler bulkTotalUpdateHandler;

    @Mock PartialPaymentHandler partialPaymentHandler;

    @Mock FullReturnHandler fullReturnHandler;

    @Mock SimClaimCache simClaimCache;

    @Mock DcPipeInternalService dcPipeInternalService;

    @Mock ServiceClaimRemainingAmountHelper serviceClaimRemainingAmountHelper;

    @Autowired private String systemId;

    @BeforeEach
    void before() {
        bulkTotalUpdateHandler =
                new BulkTotalUpdateHandler(
                        partialPaymentHandler,
                        fullReturnHandler,
                        dcPipeInternalService,
                        simClaimCache,
                        serviceClaimRemainingAmountHelper);
    }

    Claim prepareCacheClaim() {
        Set<String> claimIdSet = new java.util.HashSet<>(Collections.emptySet());
        String claimId = UUID.randomUUID().toString();
        List<Debt> debtList = new ArrayList<>();
        List<Fee> feeList = new ArrayList<>();
        List<Interest> interestList = new ArrayList<>();
        List<PaymentAnnouncement> paymentAnnouncementsList = new ArrayList<>();
        debtList.add(
                Debt.builder()
                        .principal(Principal.builder().remainingAmount(50L).build())
                        .fees(feeList)
                        .interests(interestList)
                        .build());
        claimIdSet.add(claimId);
        Claim claim =
                Claim.builder()
                        .krn(
                                KrnUtils.generate(systemId, "eu", CLAIM, UUID.fromString(claimId))
                                        .toString())
                        .debts(debtList)
                        .paymentAnnouncements(paymentAnnouncementsList)
                        .state(ClaimState.PLACED)
                        .build();
        when(simClaimCache.getClaimIdFromCache()).thenReturn(claimIdSet);
        var claimKrnFormat = "krn:debt-collection-pipeline-eu:claim:%s";
        when(dcPipeInternalService.getClaimByKrn(String.format(claimKrnFormat, claimId)))
                .thenReturn(claim);
        return claim;
    }

    @Test
    void partialPaymentSanity() {
        Claim claim = prepareCacheClaim();
given(serviceClaimRemainingAmountHelper.getClaimRemainingAmount(claim)).willReturn(100L);
        bulkTotalUpdateHandler.handle(100, 0);
then(partialPaymentHandler).should().emitPartialPayment(anyString(),eq(100L / 2));
then(fullReturnHandler).should().emitFullReturn(anyString());
    }

    @Test
    void fullReturnSanity() {
        prepareCacheClaim();
        bulkTotalUpdateHandler.handle(0, 100);
then(fullReturnHandler).should().emitFullReturn(anyString());
then(partialPaymentHandler).should().emitPartialPayment(anyString(),anyLong());
    }

    @Test
    void verifyAllHandledClaimComesFromCache() {
        Set<String> emptySet = Collections.emptySet();
given(simClaimCache.getClaimIdFromCache()).willReturn(emptySet);
        bulkTotalUpdateHandler.handle(100, 0);
then(partialPaymentHandler).should().emitPartialPayment(anyString(),anyLong());
    }
}
package com.klarna.dcpipe.simulator.events.corebanking;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static java.time.OffsetDateTime.parse;
import static java.util.Arrays.asList;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.klarna.corebanking.txn.avro.TxnEngineEvent;
import com.klarna.corebanking.txn.avro.TxnEnginePartitionKey;
import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dc_cross_cutting.kafka.KafkaPublisher;
import com.klarna.dcpipe.api.internal.dto.BatchPayment;
import com.klarna.dcpipe.api.internal.dto.PaymentAnnouncement;
import com.klarna.dcpipe.client.dcpipe.internal.DcPipeInternalService;
import com.klarna.dcpipe.simulator.cache.SimBatchPaymentCache;
import com.klarna.dcpipe.simulator.cache.SimRefDataCache;
import com.klarna.dcpipe.simulator.model.SimBankAccount;
import com.klarna.dcpipe.simulator.model.SimBatchPayment;
import com.klarna.dcpipe.simulator.model.SimDcaClientKey;
import com.klarna.dcpipe.simulator.model.SimDomicile;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class PartnerBankAccountStatementPublisherTest {

    private static final String BATCH_PAYMENT_ID = "ABCDEFGHIJKL";
    private static final String UNKNOWN_BATCH_PAYMENT_ID = "unknown-batch-payment-id";
    private static final String IBAN = "IBAN";

    @Mock KafkaPublisher<TxnEnginePartitionKey, TxnEngineEvent> kafkaPublisher;

    @Mock DcPipeInternalService internalApiClient;

    @Mock SimRefDataCache simRefDataCache;

    @Mock SimBatchPaymentCache simBatchPaymentCache;

    @Mock SimBatchPayment simBatchPayment;

    private SimBankAccount simBankAccount;
    private SimDomicile simDomicile;
    private SimDcaClientKey simDcaClientKey;
    private PartnerBankAccountStatementPublisher publisher;

    @BeforeEach
    void beforeEach() {
        simBankAccount = new SimBankAccount(IBAN);
        simDcaClientKey = new SimDcaClientKey("DCA_GROUP_ID", "DCA_ID", "DCA_CLIENT_ID");
        simDomicile = SimDomicile.SE;

        publisher =
                new PartnerBankAccountStatementPublisher(
                        internalApiClient,
                        kafkaPublisher,
                        simRefDataCache,
                        simBatchPaymentCache,
                        new PartnerBankAccountStatementGenerator());
    }

    @Test
    void matchingEvent() {
given(simRefDataCache.getSingleSimBankAccount()).willReturn(simBankAccount);
given(simBatchPayment.simDcaClientKey()).willReturn(simDcaClientKey);
given(simRefDataCache.getSimDomicile(any())).willReturn(simDomicile);
given(simBatchPaymentCache.getSimBatchPayment(BATCH_PAYMENT_ID)).willReturn(simBatchPayment);
given(simBatchPayment.batchPaymentId()).willReturn(BATCH_PAYMENT_ID);
given(simBatchPayment.getAnnouncedButNotReversedAmount()).willReturn(100L);

        publisher.publishMatchingEvent(BATCH_PAYMENT_ID);

then(simBatchPaymentCache).should().getSimBatchPayment(anyString());
then(simRefDataCache).should().getSimDomicile(simDcaClientKey);
then(simBatchPayment).should().getAnnouncedButNotReversedAmount();
then(kafkaPublisher).should().send(any(),any(),any());
    }

    @Test
    void event() {
given(simRefDataCache.getSingleSimBankAccount()).willReturn(simBankAccount);
given(simBatchPayment.simDcaClientKey()).willReturn(simDcaClientKey);
given(simRefDataCache.getSimDomicile(any())).willReturn(simDomicile);
given(simBatchPaymentCache.getSimBatchPayment(BATCH_PAYMENT_ID)).willReturn(simBatchPayment);

        publisher.publishNonMatchingEvent(BATCH_PAYMENT_ID, 100L, "ANOTHER_REF");

then(simBatchPaymentCache).should().getSimBatchPayment(anyString());
then(simRefDataCache).should().getSimDomicile(simDcaClientKey);
then(kafkaPublisher).should().send(any(),any(),any());
    }

    @Test
    void handleBatchPaymentNotFoundInSimCache() {
given(simRefDataCache.getSingleSimBankAccount()).willReturn(simBankAccount);
given(simBatchPaymentCache.getSimBatchPayment(UNKNOWN_BATCH_PAYMENT_ID)).willReturn(null);
given(internalApiClient.getBatchPaymentById(UNKNOWN_BATCH_PAYMENT_ID)).willReturn(generateBatchPayment());
given(simRefDataCache.getSimDomicile(any())).willReturn(simDomicile);
        publisher.publishMatchingEvent(UNKNOWN_BATCH_PAYMENT_ID);

        ArgumentCaptor<TxnEngineEvent> captor = ArgumentCaptor.forClass(TxnEngineEvent.class);
then(kafkaPublisher).should().send(any(),any(),captor.capture());
then(simRefDataCache).should().getSimDomicile(new SimDcaClientKey("GROUP_ID", "ID", "CLIENT_ID"));
        assertThat(captor.getValue().getAmount().getValue()).isEqualTo(100L);
    }

    private BatchPayment generateBatchPayment() {
        return BatchPayment.builder()
                .stoppedAt(parse("2020-11-21T08:00+01:00"))
                .createdAt(parse("2020-11-20T08:00+01:00"))
                .dca("ID")
                .dcaClient("CLIENT_ID")
                .dcaGroup("GROUP_ID")
                .paymentAnnouncements(
                        asList(
                                PaymentAnnouncement.builder()
                                        .amount(100L)
                                        .batchPaymentId(UNKNOWN_BATCH_PAYMENT_ID)
                                        .debtItemSettlement(false)
                                        .announcedAt(parse("2020-11-20T08:00+01:00"))
                                        .bookedAt(parse("2020-11-13T08:00+01:00"))
                                        .claimKrn(
                                                "krn:monthly:bucket:dd1b6a8a-e92b-5fb0-a721-a5f0f7b937d3")
                                        .dcaReference("dca reference")
                                        .build()))
                .build();
    }
}
package com.klarna.dcpipe.simulator.handler;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static com.klarna.dcpipe.simulator.TestContext.ALEKTUM_GROUP;
import static com.klarna.dcpipe.simulator.TestContext.ALEKTUM_SE;
import static com.klarna.dcpipe.simulator.TestContext.ALEKTUM_SE_SLICE_IT_KEY;
import static com.klarna.dcpipe.simulator.model.SimDcaEndpoint.DcaRegistrationVersion.V2;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.api.external.dto.v2.StopOutsourcingReason;
import com.klarna.dcpipe.client.dcpipe.external.DcPipeExternalServiceV2;
import com.klarna.dcpipe.simulator.cache.SimClaimCache;
import com.klarna.dcpipe.simulator.cache.SimRefDataCache;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.model.SimClaim;
import com.klarna.dcpipe.simulator.model.SimClaimPlacement;
import com.klarna.dcpipe.simulator.model.SimDca;
import com.klarna.dcpipe.simulator.model.SimDcaEndpoint;
import com.klarna.dcpipe.simulator.model.SimDcaGroup;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class StopOutsourcingByDcaHandlerTest {

    @Mock SimClaimCache simClaimCache;

    @Mock SimRefDataCache simRefDataCache;

    @Mock SimSeedCache simSeedCache;

    @Mock DcPipeExternalServiceV2 externalApiClientV2;

    private StopOutsourcingByDcaHandler handler;

    private UUID claimId = UUID.randomUUID();

    @BeforeEach
    void before() {
        handler =
                new StopOutsourcingByDcaHandler(
                        simClaimCache, simRefDataCache, simSeedCache, externalApiClientV2);
        when(simClaimCache.getClaimById(any()))
                .thenReturn(
                        Optional.of(
                                new SimClaim()
                                        .currentPlacement(
                                                new SimClaimPlacement(
                                                        ALEKTUM_SE_SLICE_IT_KEY, null))
                                        .claimId(claimId.toString())));
    }

    @Test
    void sanity() {
        SimDca simDca =
                new SimDca(
                        "dcaKey",
                        "dcaName",
                        "org_id",
                        "email",
                        "phone_number",
                        "website",
                        "revenue_account",
                        null,
                        new SimDcaEndpoint("baseurl", null, V2),
                        new ConcurrentHashMap<>());
        Map<String, SimDca> dcas = new ConcurrentHashMap<>();
        dcas.put(ALEKTUM_SE, simDca);
given(simRefDataCache.getSimDcaGroup(anyString())).willReturn(new SimDcaGroup(ALEKTUM_GROUP, "name", null, dcas));
        handler.handle(
                claimId, StopOutsourcingReason.GIVE_UP.toString(), "SOME_CODE_WHATEVER", true);
then(simSeedCache).should().getSeedByAnyRef(any());
then(simSeedCache).should().storeSeed(any());
then(externalApiClientV2).should().stopOutsourcing(eq(ALEKTUM_SE_SLICE_IT_KEY.dcaGroupId()),eq(claimId),eq(GIVE_UP),eq("SOME_CODE_WHATEVER"),any(OffsetDateTime.class));
    }
}
package com.klarna.dcpipe.simulator.events.sal.totalupdated.settlement;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.allocation.ContainerAllocation;
import com.klarna.dcpipe.simulator.allocation.ContainerSettlementAllocationService;
import com.klarna.dcpipe.simulator.cache.SimClaimCache;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.events.sal.totalupdated.partialpayment.PartialPaymentContainerTotalUpdatedGenerator;
import com.klarna.dcpipe.simulator.model.SimClaim;
import com.klarna.dcpipe.simulator.model.seed.SimBalanceSeed;
import com.klarna.dcpipe.simulator.model.seed.SimClaimSeed;
import com.klarna.dcpipe.simulator.model.seed.SimContainerSeed;
import com.klarna.dcpipe.simulator.model.seed.SimFeeSeed;
import com.klarna.dcpipe.simulator.model.seed.SimInterestSeed;
import com.klarna.dcpipe.simulator.model.seed.SimSalSeed;
import com.klarna.servicing.sal.cb.container.change.ContainerChange;
import com.klarna.servicing.sal.cb.currency.CurrencyAmount;
import com.klarna.servicing.sal.cb.event.ContainerTotalUpdatedEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class PartialPaymentContainerTotalUpdatedGeneratorTest {

    @Mock SimClaimCache simClaimCache;

    @Mock SimSeedCache simSeedCache;

    @Mock ContainerSettlementAllocationService containerSettlementAllocationService;

    private PartialPaymentContainerTotalUpdatedGenerator generator;

    @BeforeEach
    void before() {
        generator =
                new PartialPaymentContainerTotalUpdatedGenerator(
                        simClaimCache, simSeedCache, containerSettlementAllocationService);
    }

    @Test
    void totalAmountSanity() {
        var seed = setUpSimClaimSeed();
        var fee = seed.sal().container().fees().get(0);
        var interest = seed.sal().container().interests().get(0);
given(containerSettlementAllocationService.containerSettlementAllocation(any(SimClaimSeed.class), anyLong())).willReturn(new ContainerAllocation().feeAllocationAmount(((long) (fee.totalAmount()))).interestAllocationAmount(((long) (interest.totalAmount()))).balanceAllocationAmount(0L));
        ContainerTotalUpdatedEvent event =
                generator.generateContainerTotalUpdatedEvent(
                        "anyClaim", (long) fee.totalAmount() + interest.totalAmount());
        var changesValue =
                event.getChanges().stream()
                        .map(ContainerChange::getChangeAmount)
                        .mapToLong(CurrencyAmount::getAmount)
                        .sum();
        var claimSeedValues = (fee.totalAmount() + interest.totalAmount());
        assertThat(event.getChanges().size()).isEqualTo(2);
        assertThat(changesValue).isEqualTo(-claimSeedValues);
        String pei = extractPaymentExternalId(event);
        assertThat(pei).startsWith("PEI");
    }

    @Test
    void paymentExternalId() {
given(containerSettlementAllocationService.containerSettlementAllocation(any(SimClaimSeed.class), anyLong())).willReturn(new ContainerAllocation().feeAllocationAmount(0L).interestAllocationAmount(0L).balanceAllocationAmount(0L));
        setUpSimClaimSeed();
        ContainerTotalUpdatedEvent event =
                generator.generateContainerTotalUpdatedEvent("anyClaim", anyLong());
        String pei = extractPaymentExternalId(event);
        assertThat(pei).startsWith("PEI");
    }

    private SimClaimSeed setUpSimClaimSeed() {
        var seed = new SimClaimSeed();
        var sal = new SimSalSeed();
        var container = new SimContainerSeed();
        List<SimBalanceSeed> balanceList = new ArrayList<>();
        var interest = new SimInterestSeed();
        var fee = new SimFeeSeed();
        container.interests(Arrays.asList(interest));
        container.fees(Arrays.asList(fee));
        container.balances(balanceList);
        sal.container(container);
        seed.sal(sal);
        seed.domicileCountryCode("SE");
        when(simClaimCache.getClaimById(any()))
                .thenReturn(
                        Optional.of(
                                new SimClaim()
                                        .aggregateKrn("any")
                                        .domicileCountryCode("SE")
                                        .productId("Monthly")));
        when(simSeedCache.getSeedByAnyRef(any())).thenReturn(seed);
        return seed;
    }

    /**
     * The assumption is that all changes are related to the same payment.
     *
     * @param event
     * @return
     */
    private String extractPaymentExternalId(ContainerTotalUpdatedEvent event) {
        for (ContainerChange change : event.getChanges()) {
            switch (change.getChangeType()) {
                case FEE_SETTLED:
                    return change.getFeeSettled().getPayment().getPaymentExternalId();
                case INTEREST_SETTLED:
                    return change.getInterestSettled().getPayment().getPaymentExternalId();
            }
        }
        return null;
    }
}
package com.klarna.dcpipe.simulator.refdata;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class RefDataManagerTest {

    @Mock SimRefDataLoader loader;

    @Mock SystemTestRefDataCacheSeeder systemTestRefDataCacheSeeder;

    @Mock TestDcaRefDataCacheSeederEU testDcaRefDataCacheSeederEu;

    @Mock TestDcaRefDataCacheSeederUS testDcaRefDataCacheSeederUs;

    private RefDataManager refDataManager;

    @BeforeEach
    void beforeEach() {
        refDataManager =
                new RefDataManager(
                        loader,
                        testDcaRefDataCacheSeederEu,
                        testDcaRefDataCacheSeederUs,
                        systemTestRefDataCacheSeeder);
    }

    @Test
    void systemTest() {
        refDataManager.seedAndLoad(RefDataSetType.SYSTEM_TEST);
then(systemTestRefDataCacheSeeder).should().seedCache();
then(loader).should().loadRefData();
    }

    @Test
    void testDcaEU() {
        refDataManager.seedAndLoad(RefDataSetType.PLAYGROUND_EU);
then(testDcaRefDataCacheSeederEu).should().seedCache();
then(loader).should().loadRefData();
    }

    @Test
    void testDcaUS() {
        refDataManager.seedAndLoad(RefDataSetType.PLAYGROUND_US);
then(testDcaRefDataCacheSeederUs).should().seedCache();
then(loader).should().loadRefData();
    }

    @Test
    void systemTestAndDcaIntegration() {
        refDataManager.seedAndLoad(RefDataSetType.SYSTEM_TEST);
        refDataManager.seedAndLoad(RefDataSetType.PLAYGROUND_EU);
then(systemTestRefDataCacheSeeder).should().seedCache();
then(loader).should(times(2)).loadRefData();
    }
}
package com.klarna.dcpipe.simulator.events.sal.dunningstate;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static com.klarna.dcpipe.simulator.TestContext.createSimClaimSeed;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.verify;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dc_cross_cutting.kafka.KafkaPublisher;
import com.klarna.dcpipe.simulator.cache.SimRefDataCache;
import com.klarna.servicing.sal.cb.event.ContainerDunningStateUpdatedEvent;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class ContainerDunningStateUpdatedEventPublisherTest {

    @Mock KafkaPublisher<String, ContainerDunningStateUpdatedEvent> kafkaPublisher;
    private ContainerDunningStateUpdatedEventPublisher containerDunningStateUpdatedEventPublisher;

    @BeforeEach
    void setup() {
        SimRefDataCache refDataCache = new SimRefDataCache();
        ContainerDunningStateUpdatedEventGenerator generator =
                new ContainerDunningStateUpdatedEventGenerator();
        containerDunningStateUpdatedEventPublisher =
                new ContainerDunningStateUpdatedEventPublisher(generator, kafkaPublisher);
    }

    @Test
    void triggerContainerDunningStateUpdatedEventTest() {
        var simSeed = createSimClaimSeed();
        containerDunningStateUpdatedEventPublisher.triggerEvent(simSeed, 1);
then(kafkaPublisher).should().send(any(),any(),any());
    }
}
package com.klarna.dcpipe.simulator.handler;
import static org.mockito.BDDMockito.then;
import static org.mockito.BDDMockito.given;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.klarna.dc_cross_cutting.junit.extension.VerifyNoMoreInteractions;
import com.klarna.dcpipe.simulator.cache.SimClaimCache;
import com.klarna.dcpipe.simulator.cache.SimSeedCache;
import com.klarna.dcpipe.simulator.model.SimClaim;
import com.klarna.dcpipe.simulator.model.seed.SimClaimSeed;
import com.klarna.dcpipe.simulator.trigger.TriggerDetailsService;
import com.klarna.dcpipe.simulator.trigger.TriggerScheduler;
import java.util.Optional;
import java.util.UUID;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

@VerifyNoMoreInteractions
class StopOutsourcingByCreditorHandlerTest {

    @Mock SimClaimCache simClaimCache;
    @Mock TriggerScheduler triggerScheduler;
    @Mock StopOutsourcingByDcaHandler stopOutsourcingByDcaHandler;
    @Mock SimSeedCache simSeedCache;

    @Mock TriggerDetailsService triggerDetailsService;

    private StopOutsourcingByCreditorHandler handler;

    private UUID claimId = UUID.randomUUID();

    @BeforeEach
    void before() {
        handler =
                new StopOutsourcingByCreditorHandler(
                        simClaimCache,
                        simSeedCache,
                        triggerScheduler,
                        stopOutsourcingByDcaHandler,
                        triggerDetailsService);
        when(simClaimCache.getClaimById(any()))
                .thenReturn(Optional.of(new SimClaim().claimId(claimId.toString())));
    }

    @Test
    void automaticStopOutsourcingByDcaSanity() {
given(simSeedCache.getSeedByAnyRef(any())).willReturn(new SimClaimSeed().automaticStopOutsourcingByDca(true));
        handler.handle(claimId);
then(triggerScheduler).should().schedule(any());
then(triggerDetailsService).should().getDelay(any());
    }

    @Test
    void noneAutomaticStopOutsourcingByDcaSanity() {
given(simSeedCache.getSeedByAnyRef(any())).willReturn(new SimClaimSeed().automaticStopOutsourcingByDca(false));
        handler.handle(claimId);
then(triggerScheduler).should().schedule(any());
then(triggerDetailsService).should().getDelay(any());
    }
}
8078 [main] INFO com.satya.projectanalysis.analysers.Analyzer - 1117 jar files.
9120 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.BalanceDunningStateUpdatedHandler
9124 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9128 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.dunningstate.BalanceDunningStateUpdatedEventPublisher
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by javassist.util.proxy.SecurityActions (file:/Users/satyendra.kumar/.gradle/caches/modules-2/files-2.1/org.javassist/javassist/3.25.0-GA/442dc1f9fd520130bd18da938622f4f9b2e5fba3/javassist-3.25.0-GA.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)
WARNING: Please consider reporting this to the maintainers of javassist.util.proxy.SecurityActions
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
9179 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.FullReturnHandler
9183 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9188 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9191 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.ContainerTotalUpdatedEventPublisher
9195 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.BalanceTotalUpdatedEventPublisher
9200 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsContainerTotalUpdatedGenerator
9204 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsBalanceTotalUpdatedGenerator
9217 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.ContainerDunningStateUpdateHandler
9221 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9225 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.dunningstate.ContainerDunningStateUpdatedEventPublisher
9238 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.BulkTotalUpdateHandler
9242 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.PartialPaymentHandler
9245 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.FullReturnHandler
9249 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9253 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.client.dcpipe.internal.DcPipeInternalService
9257 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.helper.ServiceClaimRemainingAmountHelper
9269 [main] INFO com.satya.projectanalysis.ClassData - Error javassist.NotFoundException: com.klarna.dcpipe.api.internal.dto.Claim for method com.klarna.dcpipe.simulator.handler.BulkTotalUpdateHandlerTest.prepareCacheClaim()
9282 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.PartialReturnHandler
9286 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9290 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9294 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.ContainerTotalUpdatedEventPublisher
9297 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.BalanceTotalUpdatedEventPublisher
9302 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsContainerTotalUpdatedGenerator
9306 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsBalanceTotalUpdatedGenerator
9319 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9323 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.trigger.TriggerScheduler
9327 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.StopOutsourcingByDcaHandler
9331 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9335 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.trigger.TriggerDetailsService
9339 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.StopOutsourcingByCreditorHandler
9361 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.BulkClaimSeedHandler
9366 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9370 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.ContainerDunningStateUpdateHandler
9374 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.BalanceDunningStateUpdatedHandler
9377 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.client.dcpipe.internal.DcPipeInternalService
9382 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.StatementBundleEvaluator
9386 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.enrichment.ClaimSeedGenerator
9407 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9412 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.enrichment.OsisEnrichmentHandler
9425 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9429 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.enrichment.PersonaEnrichmentHandler
9441 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.enrichment.KlarnaCardGatewayHandler
9455 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9459 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimRefDataCache
9463 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.enrichment.SalEnrichmentHandlerV1
9467 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.owneridupdate.BalanceOwnerIdUpdatedEventGenerator
9472 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.owneridupdate.ContainerOwnerIdUpdatedEventGenerator
9476 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.owneridupdate.BalanceOwnerIdUpdatedEventPublisher
9480 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.owneridupdate.ContainerOwnerIdUpdatedEventPublisher
9484 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.dunningstate.ContainerDunningStateUpdatedEventPublisher
9488 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.dunningstate.BalanceDunningStateUpdatedEventPublisher
9492 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.BalanceTotalUpdatedEventPublisher
9496 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.ContainerTotalUpdatedEventPublisher
9501 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.ContainerTotalUpdatedEventGenerator
9505 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.BalanceTotalUpdatedEventGenerator
9519 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9523 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.PlaceClaimHandler
9536 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9540 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimRefDataCache
9544 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9547 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.client.dcpipe.external.DcPipeExternalServiceV2
9552 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.StopOutsourcingByDcaHandler
9565 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9577 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimBatchPaymentCache
9590 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.enrichment.ClaimSeedGenerator
9594 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9607 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimRefDataCache
9620 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimDependencyCache
9633 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.model.SimDcaClientKey
9637 [main] INFO com.satya.projectanalysis.ClassData - Error javassist.NotFoundException: com.klarna.dcpipe.simulator.model.SimBatchPayment for method com.klarna.dcpipe.simulator.TestContext.createSimBatchPayment(java.lang.String)
9641 [main] INFO com.satya.projectanalysis.ClassData - Error javassist.NotFoundException: com.klarna.dcpipe.simulator.model.SimDebtItem for method com.klarna.dcpipe.simulator.TestContext.createDebtItem(java.lang.String,boolean,long,long)
9645 [main] INFO com.satya.projectanalysis.ClassData - Error javassist.NotFoundException: com.klarna.dcpipe.simulator.model.SimDebtItemChange for method com.klarna.dcpipe.simulator.TestContext.createDebtItemChange(java.lang.String,java.lang.String,long)
9649 [main] INFO com.satya.projectanalysis.ClassData - Error javassist.NotFoundException: com.klarna.dcpipe.simulator.model.seed.SimClaimSeed for method com.klarna.dcpipe.simulator.TestContext.createSimClaimSeed()
9654 [main] INFO com.satya.projectanalysis.ClassData - Error javassist.NotFoundException: com.klarna.dcpipe.simulator.model.SimPaymentAnnouncement for method com.klarna.dcpipe.simulator.TestContext.createPaymentAnnouncement(java.lang.String,java.lang.String,long)
9666 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.refdata.SimRefDataLoader
9670 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.refdata.SystemTestRefDataCacheSeeder
9675 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.refdata.TestDcaRefDataCacheSeederEU
9681 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.refdata.TestDcaRefDataCacheSeederUS
9687 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.refdata.RefDataManager
9702 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.refdata.SystemTestRefDataCacheSeeder
9706 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimRefDataCache
9711 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimDependencyCache
9717 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.refdata.EndpointGenerator
9732 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.dcengine.DcengineDataCache
9737 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.timeout.DynamicTimeoutConfig
9798 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.api.ResponseCodeProvoker
9803 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimRefDataCache
9807 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimDependencyCache
9820 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.api.klarnacardgateway.KlarnaCardGatewayMockEndpoint
9824 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.handler.enrichment.KlarnaCardGatewayHandler
9846 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9850 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9854 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsContainerTotalUpdatedGenerator
9868 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.returnings.ReturningsBalanceTotalUpdatedGenerator
9881 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.allocation.BalanceSettlementAllocationService
9886 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.partialpayment.PartialPaymentBalanceTotalUpdatedGenerator
9899 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimClaimCache
9903 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimSeedCache
9907 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.allocation.ContainerSettlementAllocationService
9911 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.partialpayment.PartialPaymentContainerTotalUpdatedGenerator
9933 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.batchpayment.DcaPaymentBalanceTotalUpdatedGenerator
9950 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.totalupdated.batchpayment.DcaPaymentContainerTotalUpdatedGenerator
9972 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.dunningstate.BalanceDunningStateUpdatedEventPublisher
9985 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.sal.dunningstate.ContainerDunningStateUpdatedEventPublisher
9999 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.client.dcpipe.internal.DcPipeInternalService
10003 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimRefDataCache
10020 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.cache.SimBatchPaymentCache
10023 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.model.SimBatchPayment
10026 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.model.SimBankAccount
10029 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.model.SimDomicile
10033 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.model.SimDcaClientKey
10036 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.events.corebanking.PartnerBankAccountStatementPublisher
10047 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.helper.ServiceClaimRemainingAmountHelper
10057 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.allocation.ContainerSettlementAllocationService
10067 [main] INFO com.satya.projectanalysis.JavaUtils - Error com.klarna.dcpipe.simulator.allocation.BalanceSettlementAllocationService
